// -*- mode: java; c-basic-offset: 2; -*-
// Copyright 2009-2011 Google, All Rights reserved
// Copyright 2011-2012 MIT, All rights reserved
// Released under the Apache License, Version 2.0
// http://www.apache.org/licenses/LICENSE-2.0

package io.qaxh.eth;

import io.qaxh.etherscan.Etherscan;

import com.google.appinventor.components.runtime.Component;
import com.google.appinventor.components.runtime.AndroidNonvisibleComponent;
import com.google.appinventor.components.runtime.ComponentContainer;

import org.web3j.abi.TypeEncoder;
import org.web3j.abi.EventEncoder;
import org.web3j.abi.FunctionEncoder;
import org.web3j.abi.FunctionReturnDecoder;
import org.web3j.abi.TypeReference;
import org.web3j.abi.datatypes.*;
import org.web3j.abi.datatypes.generated.Uint8;
import org.web3j.abi.datatypes.generated.StaticArray10;
import org.web3j.abi.datatypes.generated.Uint256;
import org.web3j.abi.datatypes.generated.Bytes32;
import org.web3j.crypto.Credentials;
import org.web3j.crypto.RawTransaction;
import org.web3j.crypto.TransactionEncoder;
import org.web3j.protocol.Web3j;
import org.web3j.protocol.Web3jFactory;
import org.web3j.protocol.core.DefaultBlockParameterName;
import org.web3j.protocol.core.DefaultBlockParameterNumber;
import org.web3j.protocol.core.methods.request.Transaction;
import org.web3j.protocol.core.methods.response.*;
import org.web3j.protocol.http.HttpService;
import org.web3j.utils.Numeric;
import org.web3j.utils.Convert;

import org.web3j.protocol.http.HttpService;
import org.web3j.protocol.Web3j;
import org.web3j.protocol.Web3jFactory;

import org.web3j.utils.Numeric;
import org.web3j.protocol.core.DefaultBlockParameterName;
import org.web3j.protocol.core.DefaultBlockParameterNumber;
import org.web3j.crypto.Credentials;
import org.web3j.crypto.Keys;
import org.web3j.crypto.Hash;
import org.web3j.tx.RawTransactionManager;
import org.web3j.utils.Convert;
import org.web3j.tx.ManagedTransaction;
import org.web3j.protocol.core.methods.response.EthBlock.TransactionResult;

import org.web3j.abi.FunctionEncoder;
import org.web3j.abi.FunctionReturnDecoder;
import org.web3j.abi.TypeReference;
import org.web3j.crypto.ECKeyPair;
import org.web3j.crypto.RawTransaction;
import org.web3j.crypto.TransactionEncoder;

import org.spongycastle.jce.provider.BouncyCastleProvider;
import org.spongycastle.crypto.generators.ECKeyPairGenerator;
import org.spongycastle.crypto.params.ECPublicKeyParameters;
import org.spongycastle.jcajce.provider.digest.Keccak;


import java.security.KeyFactory;
import java.security.spec.X509EncodedKeySpec;
import java.security.spec.PKCS8EncodedKeySpec;
import java.security.SecureRandom;
import java.security.Security;
import java.security.KeyPair;
import java.security.PrivateKey;
import java.security.PublicKey;
import java.security.KeyPairGenerator;
import java.security.spec.ECGenParameterSpec;
import java.security.spec.ECPoint;
import java.security.interfaces.ECPrivateKey;
import java.security.interfaces.ECPublicKey;
import java.security.InvalidKeyException;
import javax.crypto.Cipher;
import javax.crypto.KeyGenerator;
import javax.crypto.SecretKey;
import javax.crypto.SecretKeyFactory;
import javax.crypto.spec.IvParameterSpec;
import javax.crypto.spec.PBEKeySpec;
import javax.crypto.spec.SecretKeySpec;
import java.security.spec.*;



import com.google.appinventor.components.annotations.DesignerProperty;
import com.google.appinventor.components.annotations.DesignerComponent;
import com.google.appinventor.components.annotations.PropertyCategory;
import com.google.appinventor.components.annotations.SimpleEvent;
import com.google.appinventor.components.annotations.SimpleFunction;
import com.google.appinventor.components.annotations.SimpleObject;
import com.google.appinventor.components.annotations.SimpleProperty;
import com.google.appinventor.components.annotations.UsesLibraries;
import com.google.appinventor.components.common.ComponentCategory;
import com.google.appinventor.components.common.PropertyTypeConstants;
import com.google.appinventor.components.runtime.util.ErrorMessages;
import com.google.appinventor.components.runtime.util.YailList;

import rx.Subscription;
import rx.functions.Action1;

import android.graphics.Bitmap;
import android.graphics.Color;
import android.app.Activity;
import android.content.ContentValues;
import android.content.Intent;
import android.net.Uri;
import android.os.Environment;
import android.provider.MediaStore;
import android.os.StrictMode;

import java.io.FileNotFoundException;
import java.io.FileOutputStream;
import java.io.File;
import java.io.IOException;
import java.io.*;
import java.util.*;
import java.math.BigInteger;
import java.nio.charset.StandardCharsets;


import java.lang.Throwable;
import java.math.BigDecimal;
import java.math.BigInteger;
import java.text.SimpleDateFormat;

import java.util.Arrays;
import java.util.ArrayList;
import java.util.Collections;
import java.util.Date;
import java.util.Dictionary;
import java.util.Locale;
import java.util.List;
import java.util.Formatter;

class QAXH_ETH_COMPONENT {
  public static final int VERSION = 608;
  public static final String VERSION_STR = "6.08";
}

@DesignerComponent(
        version = QAXH_ETH_COMPONENT.VERSION,
        description = "This component implements ethereum access.",
        category = ComponentCategory.EXTENSION,
        nonVisible = true,
        iconName = "aiwebres/eth.png")
@SimpleObject(external=true)
@UsesLibraries(libraries =
        "abi-3.3.1-android.jar, " +
        "core-1.54.0.0.jar, " +
        "core-3.3.1-android.jar, " +
        "crypto-3.3.1-android.jar, " +
        "jackson-annotations-2.1.4.jar, " +
        "jackson-core-2.1.3.jar, " +
        "jackson-databind-2.1.3.jar, " +
        "javapoet-1.7.0.jar, " +
        "okhttp-3.10.0.jar, " +
        "okio-1.14.1.jar, " +
        "prov-1.54.0.0.jar, " +
        "rlp-3.3.1-android.jar, " +
        "rxjava-1.2.2.jar, " +
        "scrypt-1.4.0.jar, " +
        "slf4j-api-1.7.25.jar, " +
        "slf4j-simple-1.7.25.jar, " +
        "tuples-3.3.1-android.jar, " +
        "utils-3.3.1-android.jar"
        )
public class QAXH_Eth extends AndroidNonvisibleComponent implements Component {

    // VARIABLES

    private static final String LOG_TAG = "QaxhEthComponent";
    private Web3j web3;
    private BigInteger nonce;
    private String privHexKey;
    private BigInteger gasLimit;
    private BigInteger gasPrice;

    // CONSTRUCTOR

    /**
     * Creates a QAXH_Eth component.
     *
     * @param container container, component will be placed in
     */
    public QAXH_Eth(ComponentContainer container) {
        super(container.$form());
        StrictMode.ThreadPolicy policy = new StrictMode.ThreadPolicy.Builder().permitAll().build();
        StrictMode.setThreadPolicy(policy);

        Security.insertProviderAt(new org.spongycastle.jce.provider.BouncyCastleProvider(), 1);
        web3 = Web3jFactory.build(new HttpService("https://rinkeby.infura.io/v3/c4fe63acc6574c06a9f12d9b507a2b36"));
        gasLimit = BigInteger.valueOf(500000); // default gas limit
        nonce = null;

        try {
            gasPrice = web3.ethGasPrice().send().getGasPrice();
        }
        catch (IOException e) {
            e.printStackTrace();
        }
    }

   /**
    *   @param relayNodeUrl the new relayNodeUrl Url.
    */
    @SimpleFunction(description = "Set the RelayNodeUrl")
    public void blockchainRelayNodeSetUrl(String relayNodeUrl)
    {
        HttpService service = new HttpService(relayNodeUrl);
        web3 = Web3jFactory.build(service);
    }

    @SimpleFunction(description = "Return the Eth extension version.")
    public String blockchainGetVersion() {
        return String.valueOf(QAXH_ETH_COMPONENT.VERSION_STR);
    }


    // PUBLIC FUNCTIONS (appInventor blocks API)

    /**
     * Setup the private key and nonce private variables used in the extension.
     *
     * @param privHexKey appInventor private key.
     */
    @SimpleFunction(description="Setup the private key and nonce references in QAXH_Auth extension.")
    public void blockchainCreateAccount(String privHexKey) {
        try {
            Credentials credentials = Credentials.create(privHexKey);
            String publicAddress = credentials.getAddress();
            EthGetTransactionCount transactionCount = web3.ethGetTransactionCount(publicAddress, DefaultBlockParameterName.LATEST).send();
            this.nonce = transactionCount.getTransactionCount();
        }
        catch (Exception e) {
            e.printStackTrace();
        }
        this.privHexKey = privHexKey;
    }

    @SimpleFunction (description = "Create an keyLabel / address pair")
    public String blockchainCreateAddress() {
        ECPublicKey publicKey;
        ECPrivateKey privateKey;
        BigInteger priv = BigInteger.ZERO;
        ECPoint pubPoint;
        BigInteger pubX = BigInteger.ZERO;
        BigInteger pubY = BigInteger.ZERO;
        boolean oddY=false;
        try {
            ECGenParameterSpec ecParamSpec = new ECGenParameterSpec("secp256k1");
            KeyPairGenerator kpg = KeyPairGenerator.getInstance("ECDSA","SC");
            kpg.initialize(ecParamSpec, new SecureRandom());
            KeyPair keyPair=kpg.generateKeyPair();
            publicKey=(ECPublicKey)keyPair.getPublic();
            privateKey=(ECPrivateKey)keyPair.getPrivate();
            priv=privateKey.getS();
            pubPoint=publicKey.getW();
            pubX=pubPoint.getAffineX();
            pubY=pubPoint.getAffineY();
            oddY = pubY.testBit(0);
        } catch(Exception e) {
            e.printStackTrace();
        }
        return "0x" + priv.toString(16) + "/0x" + Keys.getAddress(pubX.toString(16) + pubY.toString(16));
    }

    /**
     * Generate an ethereum private / public key pair.
     *
     * @return the keys and address of the account, in format : Ox <privateKey> /0x04 <publicKeys> /Ox <adress>
     */
    @SimpleFunction (description = "Generate an ethereum private / public key pair.")
    public String blockchainCreateKeyTriplet() {
        ECPublicKey publicKey;
        ECPrivateKey privateKey;
        BigInteger priv = BigInteger.ZERO;
        ECPoint pubPoint;
        BigInteger pubX = BigInteger.ZERO;
        BigInteger pubY = BigInteger.ZERO;
        boolean oddY=false;
        try {
            ECGenParameterSpec ecParamSpec = new ECGenParameterSpec("secp256k1");
            KeyPairGenerator kpg = KeyPairGenerator.getInstance("ECDSA","SC");
            kpg.initialize(ecParamSpec, new SecureRandom());
            KeyPair keyPair=kpg.generateKeyPair();
            publicKey=(ECPublicKey)keyPair.getPublic();
            privateKey=(ECPrivateKey)keyPair.getPrivate();
            priv=privateKey.getS();
            pubPoint=publicKey.getW();
            pubX=pubPoint.getAffineX();
            pubY=pubPoint.getAffineY();
            oddY = pubY.testBit(0);
        } catch(Exception e) {
            e.printStackTrace();
        }
        return "0x" + priv.toString(16) + "/0x04" + pubX.toString(16) +  pubY.toString(16) + "/0x" + Keys.getAddress(pubX.toString(16) + pubY.toString(16));
    }

    /**
     * Give the keccak hash of a string
     *
     * @param message, message to hash.
     * @return hash value as hexadecimal encoded string.
     */
    @SimpleFunction(description = "Computes the Keccak-256 of the string parameter.")
    public String blockchainKeccak(String message) {
        return Hash.sha3String(message);
    }

    @SimpleFunction(description = "Returns the balance of an account.")
    public String blockchainReadBalance(String address) {
        try {
            return web3.ethGetBalance(address.toUpperCase(Locale.US), DefaultBlockParameterName.LATEST)
                .send()
                .getBalance()
                .toString();
        }
        catch (IOException e) {
          return "Could not reach network";
        }
    }

    @SimpleFunction(description = "Returns the current block number.")
    public String blockchainReadBlockNumber() {
        try {
          return web3.ethBlockNumber().send().getBlockNumber().toString();
        }
        catch (IOException e) {
          return "could not reach network";
        }
    }

    /*
   * Get the timestamp of a block
   *
   */
   @SimpleFunction(description = "Retrieves the timestamp of a block")
   public String blockchainReadBlockTimestamp(String blockNumber) {
        EthBlock ethBlock;
        try {
          ethBlock = web3.ethGetBlockByNumber(new DefaultBlockParameterNumber(new BigInteger(blockNumber)),true).send();
        }
        catch (IOException e) {
          return ("Problem connecting to network in getBlockTimestamp");
        }
        if (ethBlock.getBlock() == null) {
          return "not mined";
        }
        return ethBlock.getBlock().getTimestamp().toString();
    }

    @SimpleFunction(description = "Returns relay node client version.")
    public String blockchainRelayNodeGetVersion(){
        try {
          return web3.web3ClientVersion().send().getWeb3ClientVersion();
        }
        catch (IOException e) {
          return "Could not get version: could not reach network";
        }
    }

    /**
     * List all the transactions received by a given address from block number fromBlock to block number fromBlock + numberOfBlocks.
     *
     * @param address, the address of the user to retrieve received transactions for.
     * @param firstBlockNumber, the block umber to start from
     * @param howMuchBlocks, the number of blocks to read
     * @return the last block read / a list of received transaction, encoded in a String
     * ex : the last block read number / 0x... / 0x... / 0x...
     */
    @SimpleFunction(description = "List all the transactions received by a given address from block n° fromBlock to block n° fromBlock + numberOfBlocks.")
    public String blockchainReadReceivedBlock(String address, String firstBlockNumber, int howMuchBlocks) { //int --> Uint ?: can the "howMuchBlocks" field be negative ? (if yes, is it a reverse reading ?)
        BigInteger block = new BigInteger(firstBlockNumber);
        BigInteger toBlock = block.add(BigInteger.valueOf(howMuchBlocks));
        String result = "";
        for (; !block.equals(toBlock); block = block.add(BigInteger.ONE)) {
            try {
                EthBlock ethBlock = web3.ethGetBlockByNumber(new DefaultBlockParameterNumber(block), true).send();
                List<TransactionResult> listTx = ethBlock.getBlock().getTransactions();
                for (TransactionResult txR : listTx) {
                    org.web3j.protocol.core.methods.response.Transaction tx = (org.web3j.protocol.core.methods.response.Transaction) txR.get();
                    if (tx.getTo() != null && blockchainChecksumAddress(tx.getTo()).equals(blockchainChecksumAddress(address))) {
                        result += tx.getHash() + "/";
                    }
                }
            } catch (IOException e) {
                return "Problem connecting to network";
            }
        }
        return block.toString() + "/" + result;
    }

    @SimpleFunction(description = "Returns the token balance of an address.")
    public String blockchainERC20ReadBalance(String tokenContractAddress, String address) {
      Function function = new Function(
        "balanceOf",
        Arrays.<Type>asList(new Address(address)),
        Arrays.<TypeReference<?>>asList(new TypeReference<Uint256>() {
      }));

      List<Uint256> lst = callViewFunction(tokenContractAddress, function);
      return lst.get(0).getValue().toString();
    }

    /**
     * Retrieve the details of a transaction.
     *
     * @param String transaction_0x, the hexadecimal id of a transaction
     * @return if the network is reachable : a String with the block, sender, receiver, amount and date; if not, a String Error.
     */
    @SimpleFunction(description = "Retrieve the details of a transaction.")
    public List<String> blockchainReadTransactionDetails(String transaction_0x) {
        EthTransaction ethTx;
        try {
          ethTx=web3.ethGetTransactionByHash(transaction_0x).send();
        }
        catch (IOException e) {
          return new ArrayList();
        }
        org.web3j.protocol.core.methods.response.Transaction tx = ethTx.getTransaction();
        if (tx == null) {
          return new ArrayList();
        }
        BigInteger blockNumber=tx.getBlockNumber();;
        EthBlock ethBlock;
        BigInteger gasUsed;
        TransactionReceipt transactionReceipt;
        try {
          ethBlock = web3.ethGetBlockByNumber(new DefaultBlockParameterNumber(blockNumber),true).send();
          transactionReceipt =
             web3.ethGetTransactionReceipt(transaction_0x).send().getTransactionReceipt();
                  gasUsed = transactionReceipt.getGasUsed();
        }
        catch (IOException e) {
          return new ArrayList();
        }
        String from = tx.getFrom();
        String to = tx.getTo();
        BigInteger amount = tx.getValue();
        String inputData = tx.getInput();
        BigInteger gasPriceTx = tx.getGasPrice();
        BigInteger fee = gasPriceTx.multiply(gasUsed);
        BigInteger timestamp;
        String timestampStr;
        if (ethBlock != null && ethBlock.getBlock() != null){
          timestamp =  ethBlock.getBlock().getTimestamp();
          SimpleDateFormat sdf = new SimpleDateFormat("yyyy-MM-dd-HH-mm-ss");
          Date dt = new Date(timestamp.longValue()*1000);
          timestampStr=sdf.format(dt);
        } else {
          timestampStr = "not mined";
        }
        List<String> ret = new ArrayList();
        ret.add(blockNumber.toString());
        ret.add(from);
        ret.add(to);
        ret.add(amount.toString());
        ret.add(fee.toString());
        ret.add(timestampStr);
        ret.add(inputData);

    // Laisser le contrat à la fin pour ne pas casser l'app de Cyril
        ret.add(transactionReceipt.getContractAddress());

        return ret;
    }

    /**
     * Get the status of a transaction.
     *
     * @param String transactionId, the hexadecimal id of the transaction to scan
     * @return a String, describing the status if successful, with a Error : + explanation if not.
     */
    @SimpleFunction(description = "Retrieves the status of a transaction.")
    public String blockchainReadTransactionStatus(String transaction_0x) {
        EthTransaction ethTx;
        try {
          ethTx=web3.ethGetTransactionByHash(transaction_0x).send();
        }
        catch (IOException e) {
          return "Error: getTransactionStatus could not reach network";
        }
        try {
            EthGetTransactionReceipt ethTxReceipt = web3.ethGetTransactionReceipt(transaction_0x).send();
            TransactionReceipt txReceipt = ethTxReceipt.getTransactionReceipt();
            if (txReceipt == null)
                return "Pending";
            if (txReceipt.getStatus().equals("0x1"))
                return String.format("Mined in block#" + txReceipt.getBlockNumberRaw() + "Gas used: %d",txReceipt.getGasUsed());
            return String.format("Transaction has failed with status: %s. Gas used: %d. (not-enough gas?)", txReceipt.getStatus(), txReceipt.getGasUsed());
        }
        catch (Exception e) { }
        return "failed to poll status for transaction " + transaction_0x;
    }

    @SimpleFunction(description = "Get the lists of received and sent transaction for an address, using the etherscan API")
    public YailList blockchainReadTxLists(String address, String startNumber, String endNumber ) {
        Etherscan client = new Etherscan();
        List[] res = new List[2];
        try {
            res = client.main(address, startNumber, endNumber);
        } catch (IOException e) {
            //do nothing
        }
        YailList list = new YailList();
        List<YailList> res2 = new ArrayList<YailList>();
        res2.add(list.makeList(res[0]));
        res2.add(list.makeList(res[1]));
        return list.makeList(res2);
    }


    /// Utility Functions

    /**
     *
     * Return the given address with an EIP55 checksum.
     *
     */
    @SimpleFunction(description = "Return the given address with an EIP55 checksum.")
    public String blockchainChecksumAddress(String address) {
        return Keys.toChecksumAddress(address);
    }

    /**
     * Send Gwei = 10-9 ether.
     *
     * @param String privKeyHex, the private key of the sending account in hexadecimal
     * @param String dest, the address of the receiver in hexadecimal
     * @param String howMuchGwei, number of Gwei to send
     * @param String data, the data to encript in the transaction, usually the identity hash here
     * @return the transaction hash if successful, if not a String Error : with an explaination of why it failed.
     */
    @SimpleFunction (description = "Send Gwei = 10-9 ether.")
    public String blockchainTransferEtherTo(String address, String howManyWei, String data)
    {
        Credentials credentials = Credentials.create(this.privHexKey);
        if (nonce == null)
            setupNonce(this.privHexKey);
        try {
            BigInteger value = new BigInteger(howManyWei);
            RawTransaction rawTransaction = RawTransaction.createTransaction(this.nonce, gasPrice, gasLimit, address, value, data);
            byte[] signedMessage = TransactionEncoder.signMessage(rawTransaction, credentials);
            String hexValue = Numeric.toHexString(signedMessage);
            EthSendTransaction ethSendTransaction = web3.ethSendRawTransaction(hexValue).sendAsync().get();
            nonce = nonce.add(BigInteger.valueOf(1));
            return ethSendTransaction.getTransactionHash();
        } catch (Exception e) {
            e.printStackTrace();
            return "Error when calling `sendEther`";
        }
    }

    /**
     * Transfer ERC20 tokens to an address.
     *
     * @param to Address of the receiver.
     * @param amount Amount of tokens to be sent.
     * @param token Address of the ERC20 contract.
     * @return The transaction tx hash.
     */
    @SimpleFunction(description="Transfer ERC20 tokens to an address")
    public String blockchainERC20TransferTo(String to, String amount, String token) {
        Function function = new Function(
                "transfer",
                Arrays.<Type>asList(
                        new Address(to),
                        new Uint256(new BigInteger(amount))
                ),
                Arrays.<TypeReference<?>>asList(new TypeReference<Bool>(){})
        );
        return callNonViewFunction(token, function);
    }

    // Private functions

    private List callViewFunction(String contractAddress, Function function) {
        Credentials credentials = Credentials.create(this.privHexKey);
        String address = credentials.getAddress();
        String encodedFunction = FunctionEncoder.encode(function);
        Transaction transaction = Transaction.createEthCallTransaction(address, contractAddress, encodedFunction);
        try {
            EthCall response = web3.ethCall(transaction, DefaultBlockParameterName.LATEST).sendAsync().get();
            return FunctionReturnDecoder.decode(response.getValue(), function.getOutputParameters());
        } catch (Exception e) {
            e.printStackTrace();
        }
        return null;
    }

    private String callNonViewFunction(String contractAddress, Function function) {
        Credentials credentials = Credentials.create(this.privHexKey);
        try {
            String encodedFunction = FunctionEncoder.encode(function);
            RawTransaction rawTransaction = RawTransaction.createTransaction(nonce, gasPrice, gasLimit, contractAddress, encodedFunction);
            byte[] signedMessage = TransactionEncoder.signMessage(rawTransaction, credentials);
            String hexValue = Numeric.toHexString(signedMessage);
            String txHashLocal = Hash.sha3(hexValue);
            EthSendTransaction ethSendTransaction = web3.ethSendRawTransaction(hexValue).send();
            nonce = nonce.add(BigInteger.valueOf(1));
            return txHashLocal;
        } catch (Exception e) {
            e.printStackTrace();
            return "error: callNonViewFunction";
        }
    }

    private void setupNonce(String privateKey) {
        try {
            Credentials credentials = Credentials.create(privateKey);
            String publicAddress = credentials.getAddress();
            EthGetTransactionCount transactionCount = web3.ethGetTransactionCount(publicAddress, DefaultBlockParameterName.LATEST).send();
            nonce = transactionCount.getTransactionCount();
        }
        catch (Exception e) {
            e.printStackTrace();
        }
    }
       /**
     * Convert  bytes32 to String
     *
     * @param Bytes32
     * @return String
     */

     public static String HexString32BToJavaString(Bytes32 Hex){
        String HexString = "0x"+TypeEncoder.encode(Hex);
        int dim = 0;
        for(int i=2;i< HexString.length();i = i+2)
        {
            if(HexString.charAt(i)!= '0' || HexString.charAt(i+1)!= '0')
                dim ++;

        }



        String hex = HexString.substring(2,dim*2+2);
        int l = hex.length();
        byte[] bytes = new byte[l / 2];
        for (int i = 0; i < l; i += 2) {
            bytes[i / 2] = (byte) ((Character.digit(hex.charAt(i), 16) << 4)
                    + Character.digit(hex.charAt(i + 1), 16));
        }
        String value = new String(bytes,StandardCharsets.UTF_8);
        return value;

    }

     /**
     * Convert string to bytes32
     *
     * @param string
     * @return bytes32
     */

    public static Bytes32 JavaStringToHexString32B(String word){



        String firsthex =  String.format("0x%064x", new BigInteger(1, word.getBytes()));

        char[] ch = new char[firsthex.length()];

        // Copy character by character into array
        for (int i = 0; i < firsthex.length(); i++) {

            ch[i] = firsthex.charAt(i);
        }
        int dim = firsthex.length() - word.length()*2;
        int dim2 =firsthex.length();
        // b.length - c.length , b.length

        char[] newArray = Arrays.copyOfRange(ch, dim , dim2);


        for (int i = 2 , j = 0 ; i < word.length()*2 + 2 ; i ++ , j++)
        {
            ch[i] = newArray[j];
        }
        for (int i = 2 + word.length()*2; i < firsthex.length(); i++) {

            ch[i] = '0';
        }
        String ar ="";

        for(int i=0; i< firsthex.length(); i++)
        {ar += ch[i];}
        System.out.println(ar);

        return new Bytes32(
                Numeric.hexStringToByteArray(ar));
    }

      /**
     * Convert HexString to Ascii String
     *
     *
     */

       public static String HexStringToAsciiString(String HexString)
    {    if(!(HexString.charAt(0) == '0' && HexString.charAt(1) == 'x'))
           {HexString = "0x"+ HexString;}
        int dim = 0;
        for(int i=2;i< HexString.length();i = i+2)
        {
            if(HexString.charAt(i)!= '0' || HexString.charAt(i+1)!= '0')
                dim ++;

        }



        String hex = HexString.substring(2,dim*2+2);
        int l = hex.length();
        byte[] bytes = new byte[l / 2];
        for (int i = 0; i < l; i += 2) {
            bytes[i / 2] = (byte) ((Character.digit(hex.charAt(i), 16) << 4)
                    + Character.digit(hex.charAt(i + 1), 16));
        }
        String value = new String(bytes,StandardCharsets.UTF_8);
        return value;
    }

     @SimpleFunction(description="From Hex Form to Ascii Form")
       private static String FromHexStringToAsciiString(String HexString)
    {    if(!(HexString.charAt(0) == '0' && HexString.charAt(1) == 'x'))
           {HexString = "0x"+ HexString;}
        int dim = 0;
        for(int i=2;i< HexString.length();i = i+2)
        {
            if(HexString.charAt(i)!= '0' || HexString.charAt(i+1)!= '0')
                dim ++;

        }



        String hex = HexString.substring(2,dim*2+2);
        int l = hex.length();
        byte[] bytes = new byte[l / 2];
        for (int i = 0; i < l; i += 2) {
            bytes[i / 2] = (byte) ((Character.digit(hex.charAt(i), 16) << 4)
                    + Character.digit(hex.charAt(i + 1), 16));
        }
        String value = new String(bytes,StandardCharsets.UTF_8);
        return value;
    }


     /**
     * Convert HexString to Byte
     *
     *
     */

    public static byte[] hexStringToByteArray(String s) {

        if(s.charAt(0) == '0' && s.charAt(1) == 'x')
        {s = s.substring(2);}
        int len = s.length();
        byte[] data = new byte[len / 2];
        for (int i = 0; i < len; i += 2) {
            data[i / 2] = (byte) ((Character.digit(s.charAt(i), 16) << 4)
                    + Character.digit(s.charAt(i+1), 16));
        }
        return data;
    }

     /**
     * Check is hex Form or not
     *
     *
     */

    boolean checkHex(String s)
    {
        if(s.charAt(0) == '0' && s.charAt(1) == 'x')
        {s = s.substring(2);}

        // Size of string
        int n = s.length();

        // Iterate over string
        for(int i = 0; i < n; i++)
        {
            char ch = s.charAt(i);

            // Check if the character
            // is invalid
            if ((ch < '0' || ch > '9') &&
                    (ch < 'A' || ch > 'F') && (ch < 'a' || ch > 'f'))
            {

                return false;
            }
        }

        return true;
    }




    /**
     * Convert bytes to hexadecimal
     *
     * @param byte[] bytes, the array of bits to be translated
     * @return a string containing the transalation in hexadecimal
     */
    public static String bytesToHex(byte[] bytes) {
        char[] hexArray = "0123456789ABCDEF".toCharArray();
        char[] hexChars = new char[bytes.length * 2];
        for ( int j = 0; j < bytes.length; j++ ) {
            int v = bytes[j] & 0xFF;
            hexChars[j * 2] = hexArray[v >>> 4];
            hexChars[j * 2 + 1] = hexArray[v & 0x0F];
        }
        return new String(hexChars);
    }

    @SimpleFunction(description="Get Name, Symbol and decimal of an ERC20")
    public List<String> blockchainERC20ReadVariables (String ERC20) {

        List<String> result = new ArrayList<String>();

        Function get_name = new Function (
            "name",
            Collections.<Type>emptyList(),
            Collections.<TypeReference<?>>singletonList(new TypeReference<Utf8String>(){
            })
        );
        List<Utf8String> lst_n = callViewFunction(ERC20, get_name);
        result.add(lst_n.get(0).toString());

        Function get_symbol = new Function (
            "symbol",
            Collections.<Type>emptyList(),
            Collections.<TypeReference<?>>singletonList(new TypeReference<Utf8String>(){
            })
        );
        List<Utf8String> lst_s = callViewFunction(ERC20, get_symbol);
        result.add(lst_s.get(0).toString());

        Function get_decimals = new Function (
            "decimals",
            Collections.<Type>emptyList(),
            Collections.<TypeReference<?>>singletonList(new TypeReference<Uint256>(){
            })
        );
        List<Uint256> lst_d = callViewFunction(ERC20, get_decimals);
        result.add(lst_d.get(0).getValue().toString());

        return result;
    }

    @SimpleFunction(description="Get gasLimit in Gwei")
    public String blockchainGasLimitGet(){
        return gasLimit.toString();
    }

    @SimpleFunction(description="Set gasLimit in Gwie")
    public void blockchainGasLimitSet(String gasUnit){
        gasLimit = new BigInteger(gasUnit);
    }

    @SimpleFunction(description="Get gasPrice in Gwie")
    public List<String> blockchainGasPriceGet(){
        List<String> result = new ArrayList<String>();

        BigDecimal currentGasPrice = Convert.fromWei(gasPrice.toString(), Convert.Unit.GWEI);

        result.add(currentGasPrice.toBigInteger().toString());
        try {
            String w3j_gasPrice = web3.ethGasPrice().send().getGasPrice().toString();
            currentGasPrice = Convert.fromWei(w3j_gasPrice, Convert.Unit.GWEI);
            result.add(currentGasPrice.toBigInteger().toString());
        }
        catch (IOException e) {
            result.add("Error: getGasPrice could not reach network");
            return result;
        }
        return result;
    }

    @SimpleFunction(description="Set gasPrice in Gwie")
    public void blockchainGasPriceSet(String gwei) {
        BigDecimal newGasPrice_BD = Convert.toWei(gwei, Convert.Unit.GWEI);
        gasPrice = newGasPrice_BD.toBigInteger();
    }

    // Fin des fonctions Rinkeby_ETH

    // Début des fonctions QAXH

    //----------------------------------------USERSAFE----------------------------------------

  @SuppressWarnings("unchecked")
    private String getQaxhModule(String UserSafeKey) {
        Function function = new Function(
                "getModules",
                Collections.<Type>emptyList(),
                Arrays.<TypeReference<?>>asList(new TypeReference<DynamicArray<Address>>(){})
        );
        List<DynamicArray<Address>> lst = callViewFunction(UserSafeKey, function);
        if (lst.size() == 0) {
            return "not a usersafe address";
        }
        return lst.get(0).getValue().get(0).toString();
    }

    /**
     * Returns the creator of a qaxh usersafe, or 0 if it is not in the SchemeSafe
     *
     * @param schemeSafeAddress Address of the SchemeSafe
     * @param userSafeAddress Address of the user safe
     * @return Address of the creator, 0 if it is not a qaxh safe
     */
    /*
    @SimpleFunction(description="Returns the creator of a qaxh safe, or 0 if it is not in the SchemeSafe")
    public String isQaxhUserSafe(String schemeSafeAddress, String userSafeAddress)
    {
        Function f = new Function(
                "userSafes",
                Arrays.<Type>asList(new Address(userSafeAddress)),
                Arrays.<TypeReference<?>>asList(new TypeReference<Address>() {})
        );

        List<Address> lst = callViewFunction(schemeSafeAddress, f);
        return lst.get(0).toString();
    }
*/
    /**
     * Return true if the key is active in the Qaxh Safe.
     *
     * @param UserSafeKey Address of the userSafe.
     * @param key Key to be checked.
     * @return True if `key` is active, false otherwise.
     */
    @SimpleFunction(description="Return true if the key is active in the user Safe Qaxh Module.")
    public boolean userAppkeyIsActive(String userSafeAddress, String key) {
        String QaxhModule = getQaxhModule(userSafeAddress);
        Function function = new Function(
                "isActive",
                Collections.<Type>singletonList(new Address(key)),
                Collections.<TypeReference<?>>singletonList(new TypeReference<Bool>() {
                })
        );
        List<Bool> lst = callViewFunction(QaxhModule, function);
        return lst.get(0).getValue().booleanValue();
    }


    /**
     * Return true if the key is not recorded in a Qaxh Safe.
     *
     * @param UserSafeKey Address of the userSafe.
     * @param key Key to be checked.
     * @return True if `key` is not active, false otherwise.
     */
    /*
    @SimpleFunction(description="Return true if the user Safe Qaxh Module doesn't contain the given key.")
    public boolean userIdentityIsAppkeyNotAnOwner(String userSafeAddress, String key) {
        String QaxhModule = getQaxhModule(userSafeAddress);
        Function function = new Function(
                "isNotAnOwner",
                Collections.<Type>singletonList(new Address(key)),
                Collections.<TypeReference<?>>singletonList(new TypeReference<Bool>() {
                })
        );
        List<Bool> lst = callViewFunction(QaxhModule, function);
        return lst.get(0).getValue().booleanValue();
    }
    */

    /**
     * List a Qaxh Safe owner keys according to their status (ex: active).
     *
     * @param UserSafeKey address of the userSafe.
     * @param active If set to true, include the active keys in the output list.
     * @return A list of Strings corresponding to the matching keys.
     */
    @SimpleFunction(description="Return a list of the active keys of a userSafe.")
    @SuppressWarnings("unchecked")
    public List<String> userAppkeyGetList(String userSafeAddress) {
        String QaxhModule = getQaxhModule(userSafeAddress);
        Function function = new Function("listKeys",
                Collections.<Type>emptyList(),
                Arrays.<TypeReference<?>>asList(new TypeReference<DynamicArray<Address>>(){
                })
        );
        List<Array<Address>> input = callViewFunction(QaxhModule, function);
        List<String> output = new ArrayList();
        for(Address address : input.get(0).getValue()){
            if (address.toUint160().getValue().intValue() == 0)
                continue;
            output.add(address.toString());
        }
        return output;
    }

    /**
     * Get the Qaxh address of a Qaxh Safe.
     *
     * @param UserSafeKey Address of the userSafe.
     * @return The Qaxh platform address as a String.
     */
  /*
    @SimpleFunction(description="Getter of the Qaxh Ethereum address referenced in a user Safe.")
    @SuppressWarnings("unchecked")
    public String userGetMasterKey(String userSafeAddress) {
      // should not be used
        String QaxhModule = getQaxhModule(userSafeAddress);
        Function function = new Function(
                "qaxh",
                Collections.<Type>emptyList(),
                Collections.<TypeReference<?>>singletonList(new TypeReference<Address>() {
                })
        );
        List<Address> lst = callViewFunction(QaxhModule, function);
        return lst.get(0).toString();
    }
  */

    /**
     * Get the QI hash of a Qaxh Safe.
     *
     * @param UserSafeKey Address of the userSafe.
     * @return the QIHash as a String.
     */

    /*
    @SuppressWarnings("unchecked")
    @SimpleFunction(description = "Get the QIHash of a userSafe.")
    public String getQIHash(String userSafeAddress) {
        String QaxhModule = getQaxhModule(userSafeAddress);
        Function function = new Function(
                "QI_hash",
                Collections.<Type>emptyList(),
                Collections.<TypeReference<?>>singletonList(new TypeReference<Utf8String>(){})
        );
        List<Utf8String> lst = callViewFunction(QaxhModule, function);
        return lst.get(0).toString();
    }

    */

    /**
     * Get the QE hash of a Qaxh Safe.
     *
     * @param UserSafeKey Address of the userSafe.
     * @return the QEHash as a String.
     */

    /*
    @SuppressWarnings("unchecked")
    @SimpleFunction(description = "Get the QEHash of a userSafe.")
    public String getQEHash(String userSafeAddress) {
        String QaxhModule = getQaxhModule(userSafeAddress);
        Function function = new Function(
                "QE_hash",
                Collections.<Type>emptyList(),
                Collections.<TypeReference<?>>singletonList(new TypeReference<Utf8String>(){})
        );
        List<Utf8String> lst = callViewFunction(QaxhModule, function);
        return lst.get(0).toString();
    }

    */

    /**
     * Get the identity level of a Qaxh Safe.
     *
     * @param UserSafeKey Address of the userSafe.
     */
    /*
    @SuppressWarnings("unchecked")
    @SimpleFunction(description = "Get the Qaxh identity level of a userSafe.")
     public int getIdentityTrustLevel(String userSafeAddress) {
        String QaxhModule = getQaxhModule(userSafeAddress);
        Function function = new Function(
                "identityLevel",
                Collections.<Type>emptyList(),
                Collections.<TypeReference<?>>singletonList(new TypeReference<Uint8>(){})
        );
        List<Uint8> lst = callViewFunction(QaxhModule, function);
        return lst.get(0).getValue().intValue();
    }
    */

    /**
     * Return true if a given transaction contains the counter-signature event from the extension Ethereum private key for a given Qaxh Safe.
     *
     * @param UserSafeKey Address of the userSafe.
     * @param tx_hash tx hash of the transaction to be checked.
     */
    /*
    @SimpleFunction(description="Check if a mined transaction contains the Qaxh Identity certification log for a given userSafe.")
    public boolean isSafeIdentityAccepted(String userSafeAddress, String tx_QI) {
        try {
            Event event = new Event("CertifyIdentity",
                    Collections.<TypeReference<?>>emptyList(),
                    Collections.<TypeReference<?>>singletonList(new TypeReference<Address>(){})
            );
            String encodedEvent = EventEncoder.encode(event);
            EthGetTransactionReceipt receipt = web3.ethGetTransactionReceipt(tx_QI).sendAsync().get();
            List<Log> logs = receipt.getTransactionReceipt().getLogs();
            for(Log log : logs){
                if (
                        log.getTopics().size() == 1 &&
                        log.getTopics().get(0).equals(encodedEvent) &&
                        log.getAddress().equals(getQaxhModule(userSafeAddress))
                ) { return true; }
            }
        }
        catch (Exception e) {
            e.printStackTrace();
        }
        return false;
    }
*/
    private String sendFromSafe(String UserSafeKey, String to, String amount, String token) {
        String QaxhModule = getQaxhModule(UserSafeKey);
        Function function = new Function(
                "sendFromSafe",
                Arrays.<Type>asList(
                        new Address(to),
                        new Uint256(new BigInteger(amount)),
                        new Address(token)
                ),
                Collections.<TypeReference<?>>emptyList()
        );
        return callNonViewFunction(QaxhModule, function);
    }

    /**
     * Ask a Qaxh Safe to transfer Ethers.
     *
     * @param UserSafeKey Address of the userSafe.
     * @param to Destination address of the Ethers.
     * @param amount Amount of Ethers to be sent, in weis.
     * @return The transaction tx hash.
     */
    @SimpleFunction(description="Send <amount> Weis from the userSafe.")
    public String userSendEtherFromSafe(String userSafeAddress, String to, String wei) {
        return sendFromSafe(userSafeAddress, to, wei, "0x0");
    }

    /**
     * Ask a Qaxh Safe to transfer ERC20 tokens.
     *
     * @param UserSafeKey Address of the userSafe.
     * @param to Destination address of the Ethers.
     * @param amount Amount of tokens to be sent.
     * @param token Public address of the deployed ERC20 token.
     * @return The transaction tx hash.
     */
    @SimpleFunction(description="Send <amount> ask the transfer function of a token from the userSafe.")
    public String userSendERC20FromSafe(String userSafeAddress, String to, String amount, String token) {
        return sendFromSafe(userSafeAddress, to, amount, token);
    }

    /**
     * Counter-sign the identity contained into a Qaxh Safe with the extension Ethereum private key.
     *
     * @param UserSafeKey Address of the userSafe.
     * @return The transaction tx hash.
     */
    @SimpleFunction(description="sets the acceptance of the identity of a given user Safe")
    public String userIdentitySignSafeActivation(String userSafeAddress) {
        String QaxhModule = getQaxhModule(userSafeAddress);
        Function function = new Function(
                "updateSafeActivation",
                Collections.<Type>emptyList(),
                Collections.<TypeReference<?>>emptyList()
        );
        return callNonViewFunction(QaxhModule, function);
    }

    /**
     * Delete a Qaxh Safe active key.
     *
     * @param UserSafeKey Address of the userSafe.
     * @param key The key to be removed.
     * @return The transaction tx hash.
     */
    @SimpleFunction(description="Delete an active key")
    public String userAppkeySignRemove(String userSafeAddress, String key) {
        String QaxhModule = getQaxhModule(userSafeAddress);
        Function function = new Function(
                "removeKey",
                Collections.<Type>singletonList(new Address(key)),
                Collections.<TypeReference<?>>emptyList()
        );
        return callNonViewFunction(QaxhModule, function);
    }

    /**
     * Emit a CertifyData event from a Qaxh Safe.
     *
     * @param UserSafeKey Address of the target Qaxh certified Safe.
     * @param data data to certify
     * @return The transaction tx hash.
     */
    @SimpleFunction(description="Emit a data certifying event from the target safe.")
    public String userTtagSign(String userSafeAddress, String data) {
        String QaxhModule = getQaxhModule(userSafeAddress);
        Function function = new Function(
                "certifyData",
                Collections.<Type>singletonList(new Utf8String(data)),
                Collections.<TypeReference<?>>emptyList()
        );
        return callNonViewFunction(QaxhModule, function);
    }

    /**
     * Get data certified by a Qaxh user Safe knowing the tx hash of the certification transaction event.
     *
     * @param UserSafeKey Address of the target userSafe.
     * @param tx_hash Tx hash of the transaction that contains the certification event.
     * @return The certified data.
     */
    @SimpleFunction(description="Get data certified by a Qaxh user Safe knowing the tx hash of the certification transaction.")
    public String userTtagDataGet(String tx_hash) {
        try {
            Event event = new Event("CertifyData",
                    Collections.<TypeReference<?>>emptyList(),
                    Collections.<TypeReference<?>>singletonList(new TypeReference<Utf8String>(){})
            );
            String encodedEvent = EventEncoder.encode(event);
            EthGetTransactionReceipt receipt = web3.ethGetTransactionReceipt(tx_hash).sendAsync().get();
            List<Log> logs = receipt.getTransactionReceipt().getLogs();
            for(Log log : logs){
                if (
                        log.getTopics().size() == 1 &&
                        log.getTopics().get(0).equals(encodedEvent)
                ) {
                    String hexLength = log.getData().substring(66, 130);
                    int length = Numeric.toBigInt(hexLength).intValue();
                    String hex = log.getData().substring(130);
                    hex = hex.substring(0, 2 * length);
                    StringBuilder sb = new StringBuilder();
                    StringBuilder temp = new StringBuilder();
                    for( int i=0; i<hex.length()-1; i+=2 ){
                        //grab the hex in pairs
                        String output = hex.substring(i, (i + 2));
                        //convert hex to decimal
                        int decimal = Integer.parseInt(output, 16);
                        //convert the decimal to character
                        sb.append((char)decimal);
                        temp.append(decimal);
                    }
                    return sb.toString();

                }
            }
        }
        catch (Exception e) {
            e.printStackTrace();
        }
        return null;
    }

    /**
     * Get the Age of Majority value of a Qaxh Safe.
     *
     * @param UserSafeKey Address of the userSafe.
     */

    /*
    @SuppressWarnings("unchecked")
    @SimpleFunction(description = "Get the Age of Majority value of a userSafe.")
    public boolean getAgeOfMajority(String userSafeAddress) {
        String QaxhModule = getQaxhModule(userSafeAddress);
        Function function = new Function(
            "ageOfMajority",
            Collections.<Type>emptyList(),
            Collections.<TypeReference<?>>singletonList(new TypeReference<Bool>() {
            })
        );
        List<Bool> lst = callViewFunction(QaxhModule, function);
        return lst.get(0).getValue().booleanValue();
    }

    @SuppressWarnings("unchecked")
    @SimpleFunction(description = "Get the checkHash value of a userSafe.")
    public String getCheckHash(String userSafeAddress) {
        String QaxhModule = getQaxhModule(userSafeAddress);
        Function function = new Function(
            "checkHash",
            Collections.<Type>emptyList(),
            Collections.<TypeReference<?>>singletonList(new TypeReference<Utf8String>() {
            })
        );
        List<Utf8String> lst = callViewFunction(QaxhModule, function);
        return lst.get(0).toString();
    }

    */

    /**
     * Update the checkHash of a UserSafe
     *
     * @param checkHash The key to be removed.
     * @param UserSafeKey Address of the userSafe.
     * @return The transaction tx hash
     */
    @SimpleFunction(description="Update the UserSafe's checkHash")
    public String userIdentityCheckhashUpdate(String newCheckhash, String userSafeAddress) {
        String QaxhModule = getQaxhModule(userSafeAddress);
        Function function = new Function(
                "updateCheckHash",
                Collections.<Type>singletonList(new Utf8String(newCheckhash)),
                Collections.<TypeReference<?>>emptyList()
        );
        return callNonViewFunction(QaxhModule, function);
    }



    @SimpleFunction(description="Get the deadline of a given key")
    public int userAppkeyGetDeadline(String appAddress, String userSafeAddress)
    {
        String QaxhModule = getQaxhModule(userSafeAddress);
        Function function = new Function(
            "getAppKeyDeadline",
            Collections.<Type>singletonList(new Address(appAddress)),
            Collections.<TypeReference<?>>singletonList(new TypeReference<Uint256>(){})
        );
        List<Uint256> lst = callViewFunction(QaxhModule, function);
        return lst.get(0).getValue().intValue();
    }

    @SimpleFunction(description="Get the deadline of a given key")
    public String userIdentityGetParentAddress(String userSafeAddress)
    {
        String QaxhModule = getQaxhModule(userSafeAddress);
        Function function = new Function(
            "getParentAddress",
            Collections.<Type>emptyList(),
            Collections.<TypeReference<?>>singletonList(new TypeReference<Address>(){})
        );
        List<Address> lst = callViewFunction(QaxhModule, function);
        return lst.get(0).getValue().toString();
    }

    // Fonction used to retrieve all the variables of a given UserSafe

    @SimpleFunction(description="Retrieve userSafe variables")
    public List<String> userIdentityGetSafeVariables(String userSafeAddress) {
        List<String> result = new ArrayList<String>();
        String QaxhModule = getQaxhModule(userSafeAddress);


        Function qihf = new Function(
            "QI_hash",
            Collections.<Type>emptyList(),
            Collections.<TypeReference<?>>singletonList(new TypeReference<Utf8String>(){})
        );
        List<Utf8String> qih = callViewFunction(QaxhModule, qihf);
        result.add(qih.get(0).toString());

        Function qehf = new Function(
            "QE_hash",
            Collections.<Type>emptyList(),
            Collections.<TypeReference<?>>singletonList(new TypeReference<Utf8String>(){})
        );
        List<Utf8String> qeh = callViewFunction(QaxhModule, qehf);
        result.add(qeh.get(0).toString());

        Function ilf = new Function(
            "identityLevel",
            Collections.<Type>emptyList(),
            Collections.<TypeReference<?>>singletonList(new TypeReference<Uint8>(){})
        );
        List<Uint8> il = callViewFunction(QaxhModule, ilf);
        result.add(il.get(0).getValue().toString());

        Function aomf = new Function(
            "ageOfMajority",
            Collections.<Type>emptyList(),
            Collections.<TypeReference<?>>singletonList(new TypeReference<Uint8>(){})
        );
        List<Uint8> aom = callViewFunction(QaxhModule, aomf);
        result.add(aom.get(0).getValue().toString());

        Function cif = new Function(
            "customerId",
            Collections.<Type>emptyList(),
            Collections.<TypeReference<?>>singletonList(new TypeReference<Utf8String>(){})
        );
        List<Utf8String> ci = callViewFunction(QaxhModule, cif);
        result.add(ci.get(0).toString());

        Function stf = new Function(
            "safeType",
            Collections.<Type>emptyList(),
            Collections.<TypeReference<?>>singletonList(new TypeReference<Uint>(){})
        );
        List<Uint> st = callViewFunction(QaxhModule, stf);
        result.add(st.get(0).getValue().toString());

        Function svf = new Function(
            "safeVersion",
            Collections.<Type>emptyList(),
            Collections.<TypeReference<?>>singletonList(new TypeReference<Utf8String>(){})
        );
        List<Utf8String> sv = callViewFunction(QaxhModule, svf);
        result.add(sv.get(0).toString());

        Function chf = new Function(
            "checkHash",
            Collections.<Type>emptyList(),
            Collections.<TypeReference<?>>singletonList(new TypeReference<Utf8String>(){})
        );
        List<Utf8String> ch = callViewFunction(QaxhModule, chf);
        result.add(ch.get(0).toString());

        Function saf = new Function(
            "safeActivation",
            Collections.<Type>emptyList(),
            Collections.<TypeReference<?>>singletonList(new TypeReference<Uint8>(){})
        );
        List<Uint8> sa = callViewFunction(QaxhModule, saf);
        result.add(sa.get(0).getValue().toString());

        return result;
    }

    @SimpleFunction(description="Get all the active QB_indexes of a userSafe")
    public List<String> userQbGetActiveList (String userSafeAddress)
    {
        Function get = new Function (
            "getActiveQBIndexList",
            Collections.<Type>emptyList(),
            Arrays.<TypeReference<?>>asList(new TypeReference<DynamicArray<Uint256>>(){})
        );
        List<DynamicArray<Uint256>> keys = callViewFunction(userSafeAddress, get);
        List<String> ret = new ArrayList();
        for (Uint256 index : keys.get(0).getValue()){
            ret.add(index.getValue().toString());
        }
        return ret;
    }

    // Fonction used to retrieve all the QB variables of a given indexQB
    /*
    @SimpleFunction(description="Retrieve QB_structs variables from userSafe")
    public List<String> userQbGetVariables(String userSafeAddress, String indexQB) {

      Function getData = new Function (
                "QB_structs",
                Collections.<Type>singletonList(new Uint256(new BigInteger(indexQB))),
                Arrays.<TypeReference<?>>asList(
                        new TypeReference<Utf8String>(){},     //Hash_QB
                        new TypeReference<Uint8>(){},       //ibanTrustLevel
                        new TypeReference<Uint8>(){}      //status
                )
      );
      List<String> result = new ArrayList<String>();
      List<Type> data = callViewFunction(userSafeAddress, getData);
      result.add(data.get(0).toString());
      result.add(data.get(1).getValue().toString());
      result.add(data.get(2).getValue().toString());

      return result;
    }*/

    @SimpleFunction(description="Retrieve QB_structs variables from userSafe")
    public List<String> userQbGetVariables (String userSafeAddress, String indexQB)
    {
        List<String> result = new ArrayList<String>();

        Function qbfif = new Function (
            "getQBfromIndex",
            Collections.<Type>singletonList(new Uint(new BigInteger(indexQB))),
            Collections.<TypeReference<?>>singletonList(new TypeReference<Utf8String>(){})
        );
        List<Utf8String> qbfi = callViewFunction(userSafeAddress, qbfif);
        result.add(qbfi.get(0).toString());

        Function ibfif = new Function (
            "getIbanTrustLevelFromIndex",
            Collections.<Type>singletonList(new Uint(new BigInteger(indexQB))),
            Collections.<TypeReference<?>>singletonList(new TypeReference<Uint8>(){})
        );
        List<Uint8> ibfi = callViewFunction(userSafeAddress, ibfif);
        result.add(ibfi.get(0).getValue().toString());

        Function sfif = new Function (
            "getStatusFromIndex",
            Collections.<Type>singletonList(new Uint(new BigInteger(indexQB))),
            Collections.<TypeReference<?>>singletonList(new TypeReference<Uint8>(){})
        );
        List<Uint8> sfi = callViewFunction(userSafeAddress, sfif);
        result.add(sfi.get(0).getValue().toString());

        return result;
    }

    // Function used to counter-sign a QB_hash and validate it, with key verification
    /*
    @SimpleFunction(description="sets the acceptance of the identity of a given user Safe")
    public String userQbSignIndex(String userSafeAddress, String indexQB, String key) {
        String QaxhModule = getQaxhModule(userSafeAddress);
        Function function = new Function(
                "activateQB",
                Arrays.<Type>asList(
                new Uint(new BigInteger(indexQB)),
                new Address(key)),
                Collections.<TypeReference<?>>emptyList()
        );
        return callNonViewFunction(QaxhModule, function);
    }
    */

    // Function used to counter-sign a QB_hash and validate it, without key verification

    @SimpleFunction(description="sets the acceptance of the identity of a given user Safe")
    public String userQbSignIndex(String userSafeAddress, String indexQB) {
        String QaxhModule = getQaxhModule(userSafeAddress);
        Function function = new Function(
                "activateQB",
                Collections.<Type>singletonList(new Uint(new BigInteger(indexQB))),
                Collections.<TypeReference<?>>emptyList()
        );
        return callNonViewFunction(QaxhModule, function);
    }

    // Function used to remove an indexQB from the list

    @SimpleFunction(description="Remove indexQB from List")
    public String userQbDeleteIndex(String userSafeAddress, String indexQB){
        String QaxhModule = getQaxhModule(userSafeAddress);
        Function function = new Function(
                "removeQB",
                Collections.<Type>singletonList(new Uint(new BigInteger(indexQB))),
                Collections.<TypeReference<?>>emptyList()
        );
        return callNonViewFunction(QaxhModule, function);
    }




    //----------------------------------------SCHEMESAFE----------------------------------------

    // Fonction used to retrieve variables of a given safeAddress from the schemeQAXH

    @SimpleFunction(description="Retrieve safe from SchemeQAXH")
    public List<String> schemeIsQaxhioSafe(String safeAddress, String schemeAddress) {
        List<String> result = new ArrayList<String>();

        Function stf = new Function(
            "getSafeType",
            Collections.<Type>singletonList(new Address(safeAddress)),
            Collections.<TypeReference<?>>singletonList(new TypeReference<Uint256>(){})
        );
        List<Uint256> st = callViewFunction(schemeAddress, stf);
        result.add(st.get(0).getValue().toString());

        Function cidf = new Function(
            "getCustomerId",
            Collections.<Type>singletonList(new Address(safeAddress)),
            Collections.<TypeReference<?>>singletonList(new TypeReference<Uint256>(){})
        );
        List<Uint256> cid = callViewFunction(schemeAddress, cidf);
        result.add(cid.get(0).getValue().toString());

        Function mof = new Function(
            "getMoney",
            Collections.<Type>singletonList(new Address(safeAddress)),
            Collections.<TypeReference<?>>singletonList(new TypeReference<Uint256>(){})
        );
        List<Uint256> mo = callViewFunction(schemeAddress, mof);
        result.add(mo.get(0).getValue().toString());

        Function lpf = new Function(
            "getLinkedPlatform",
            Collections.<Type>singletonList(new Address(safeAddress)),
            Collections.<TypeReference<?>>singletonList(new TypeReference<Address>(){})
        );
        List<Address> lp = callViewFunction(schemeAddress, lpf);
        result.add(lp.get(0).toString());

        return result;
    }

    @SimpleFunction(description="get list of money in Scheme")
    public List<String> emoneySchemeList (String schemeSafeAddress)
    {
        Function get = new Function (
            "getAllMoney",
            Collections.<Type>emptyList(),
            Arrays.<TypeReference<?>>asList(new TypeReference<DynamicArray<Address>>(){})
        );
        List<DynamicArray<Address>> keys = callViewFunction(schemeSafeAddress, get);
        List<String> ret = new ArrayList();
        for (Address addr : keys.get(0).getValue()){
            ret.add(addr.toString());
        }
        return ret;
    }

    @SimpleFunction(description="get variables of money in Scheme")
    public List<String> emoneyGetVariableInScheme (String schemeAddress, String eMoney)
    {
        List<String> result = new ArrayList<String>();

        Function state = new Function (
            "isTypeMoney",
            Arrays.<Type>asList(new Address(eMoney)),
            Collections.<TypeReference<?>>singletonList(new TypeReference<Uint256>(){})
        );
        List<Uint256> lst = callViewFunction(schemeAddress, state);
        result.add(lst.get(0).getValue().toString());

        Function lpf = new Function (
            "getMoneyLinkedPlatform",
            Arrays.<Type>asList(new Address(eMoney)),
            Collections.<TypeReference<?>>singletonList(new TypeReference<Address>(){})
        );
        List<Address> lp = callViewFunction(schemeAddress, lpf);
        result.add(lp.get(0).toString());

        return result;
    }

    @SimpleFunction(description="check if a hatch is in a given scheme")
    public String schemeHatchValidIs(String schemeAddress, String hatchAddress) {
        Function isHatchAddrAllowed = new Function(
            "isHatchAddrAllowed",
            Arrays.<Type>asList(new Address(hatchAddress)),
            Collections.<TypeReference<?>>singletonList(new TypeReference<Uint256>(){})
        );
        List<Uint256> st = callViewFunction(schemeAddress, isHatchAddrAllowed);
        return st.get(0).getValue().toString();
    }


    @SimpleFunction(description="Replace the parent addres by null and add the first hatch to the scheme")
    public String schemeHatchFirstAddressSet(String schemeAddress, String hatchAddress) {
        Function addFirstHatch = new Function(
            "addFirstHatch",
            Arrays.<Type>asList(
                new Address(hatchAddress)),
            Collections.<TypeReference<?>>emptyList()
        );
        return callNonViewFunction(schemeAddress, addFirstHatch);
    }

    @SimpleFunction(description="Returne the current parent address")
    public String schemeParentAddressGet(String schemeAddress) {
        List<String> result = new ArrayList<String>();

        Function parentAddressGet = new Function(
            "parentAddressGet",
            Collections.<Type>emptyList(),
            Arrays.<TypeReference<?>>asList(new TypeReference<Address>(){})
        );
        List<Address> st = callViewFunction(schemeAddress, parentAddressGet);
        return st.get(0).getValue().toString();
    }

    @SimpleFunction(description="Returne the current parent address")
    public List<String> schemeHatchListGet(String schemeAddress) {
        List<String> result = new ArrayList<String>();

        Function getHatchNumbers = new Function(
            "getHatchNumber",
            Collections.<Type>emptyList(),
            Collections.<TypeReference<?>>singletonList(new TypeReference<Uint>(){})
        );
        List<Uint> st = callViewFunction(schemeAddress, getHatchNumbers);
        int size = st.get(0).getValue().intValue();

        for (int i = 0; i < size; i++)
        {
            String st_index = Integer.toString(i);
            Function getRelayNodeUrl = new Function(
                "getHatchAddress",
                Collections.<Type>singletonList(new Uint(new BigInteger(st_index))),
                Arrays.<TypeReference<?>>asList(new TypeReference<Address>(){})
            );
            List<Address> tmp = callViewFunction(schemeAddress, getRelayNodeUrl);
            result.add(tmp.get(0).getValue().toString());
        }

        return result;
    }

    //----------------------------------------HATCHSAFE----------------------------------------

    // HATCH-SCHEME FUNCTION -------------------------------------------------

    @SimpleFunction(description="Update the Scheme list in a given Hatch with EOA")
    public String hatchSchemeDirectoryFirstAdd(String hatchAddress, String customerID, String schemeAddress) {
        Function addScheme = new Function(
            "schemeDirectoryEoaAdd",
            Arrays.<Type>asList(
                new Uint(new BigInteger(customerID)),
                new Address(schemeAddress)),
            Collections.<TypeReference<?>>emptyList()
        );
        return callNonViewFunction(hatchAddress, addScheme);
    }

    @SimpleFunction(description="Update the Scheme list in a given Hatch with usersafe")
    public String hatchSchemeDirectoryAdd(String userSafeAddress, String hatchAddress, String customerID, String schemeAddress) {
        String QaxhModule = getQaxhModule(userSafeAddress);
        Function addScheme = new Function(
            "hatchSchemeDirectoryAdd",
            Arrays.<Type>asList(
                new Address(hatchAddress),
                new Address(schemeAddress),
                new Uint(new BigInteger(customerID))),
            Collections.<TypeReference<?>>emptyList()
        );
        return callNonViewFunction(QaxhModule, addScheme);
    }

    @SimpleFunction(description="add a new Hatch in a given Scheme where the current hatch is allowed")
    public String hatchSchemeDirectoryElectedHatchAdd(String userSafeAddress, String hatchAddress, String electedHatchAddress, String customerID) {
        String QaxhModule = getQaxhModule(userSafeAddress);
        Function addSchemesafeNewHatch = new Function(
            "hatchNewHatchInSchemeAdd",
            Arrays.<Type>asList(
                new Address(hatchAddress),
                new Address(electedHatchAddress),
                new Uint(new BigInteger(customerID))),
            Collections.<TypeReference<?>>emptyList()
        );
        return callNonViewFunction(userSafeAddress, addSchemesafeNewHatch);
    }

    @SimpleFunction(description="get the scheme's Address with a given CustomerID (retrun nullAddr if customerID not registered)")
    public String hatchSchemeDirectoryGet(String hatchAddress, String customerID) {
        Function getScheme = new Function(
            "schemeDirectoryAddressGet",
            Collections.<Type>singletonList(new Uint(new BigInteger(customerID))),
            Collections.<TypeReference<?>>singletonList(new TypeReference<Address>(){})
        );
        List<Address> st = callViewFunction(hatchAddress, getScheme);
        return st.get(0).getValue().toString();
    }

    @SimpleFunction(description="remove the given HatchAddress from the scheme")
    public String hatchSchemeDirectoryHatchRemove(
            String userSafeAddress,
            String hatchAddress,
            String hatchAddressToRemove,
            String customerID)
    {
        String QaxhModule = getQaxhModule(userSafeAddress);

        Function removeHatch = new Function(
            "hatchSchemeDirectoryRemove",
            Arrays.<Type>asList(
                new Address(hatchAddress),
                new Address(hatchAddressToRemove),
                new Uint(new BigInteger(customerID))),
            Collections.<TypeReference<?>>emptyList()
        );
        return callNonViewFunction(userSafeAddress, removeHatch);
    }

    // HATCH-KEEPER FUNCTION -------------------------------------------------

    @SimpleFunction(description="check if a given address is a Keeper")
    public String hatchKeeperAddressIs(String hatchAddress, String address) {
        Function isKeeperAddress = new Function(
            "keeperAddressIs",
            Arrays.<Type>asList(
                new Address(address)),
            Collections.<TypeReference<?>>singletonList(new TypeReference<Uint256>(){})
        );
        List<Uint256> st = callViewFunction(hatchAddress, isKeeperAddress);
        return st.get(0).getValue().toString();
    }

    @SimpleFunction(description="Replace the parent addres by the usefSafe in L2 of a given Hatch")
    public String hatchKeeperEoaReplace(String userSafeAddress, String hatchAddress, String customerID) {
        Function oearReplace = new Function(
            "KeeperEoaReplace",
            Arrays.<Type>asList(
                new Uint(new BigInteger(customerID)),
                new Address(userSafeAddress)),
            Collections.<TypeReference<?>>emptyList()
        );
        return callNonViewFunction(hatchAddress, oearReplace);
    }

    @SimpleFunction(description="add a keeperAddress in L2 of a given Hatch")
    public String hatchKeeperAddressAdd(String userSafeAddress, String hatchAddress, String customerID, String newKeeperAddress) {
        String QaxhModule = getQaxhModule(userSafeAddress);
        Function addKeeper = new Function(
            "hatchKeeperAddressAdd",
            Arrays.<Type>asList(
                new Address(hatchAddress),
                new Uint(new BigInteger(customerID)),
                new Address(newKeeperAddress)),
            Collections.<TypeReference<?>>emptyList()
        );
        return callNonViewFunction(QaxhModule, addKeeper);
    }

    @SimpleFunction(description="Remove it's self from the L2 list in a given Hatch")
    public String hatchKeeperAddressRemove(String userSafeAddress, String hatchAddress, String keeperAddress) {
        // need to make this work with userSafe
        String QaxhModule = getQaxhModule(userSafeAddress);
        Function keeperAddrAutoErase = new Function(
            "hatchKeeperAddressRemove",
            Arrays.<Type>asList(
                new Address(hatchAddress),
                new Address(keeperAddress)),
            Collections.<TypeReference<?>>emptyList()
        );
        return callNonViewFunction(QaxhModule, keeperAddrAutoErase);
    }

   // HATCH-CERTIFIEDKEY FUNCTION -------------------------------------------------

    @SimpleFunction(description="check if a key is authorised in a given Hatch")
    public String hatchCertifyingkeyIs(String hatchAddress, String key) {
        Function isAuthorisedKey = new Function(
            "certifyingKeyIs",
            Arrays.<Type>asList(new Address(key)),
            Collections.<TypeReference<?>>singletonList(new TypeReference<Uint256>(){})
        );
        List<Uint256> st = callViewFunction(hatchAddress, isAuthorisedKey);
        return st.get(0).getValue().toString();
    }

    @SimpleFunction(description="add a keeperAddress in L2 of a given Hatch EOA")
    public String hatchCertifyingkeyFirstAdd(String hatchAddress, String key) {
        Function addAuthorisedKey = new Function(
            "certifyingKeyEoaAdd",
            Arrays.<Type>asList(
                new Address(key)),
            Collections.<TypeReference<?>>emptyList()
        );
        return callNonViewFunction(hatchAddress, addAuthorisedKey);
    }

    @SimpleFunction(description="add a keeperAddress in L2 of a given Hatch usersafe")
    public String hatchCertifyingkeyAdd(String userSafeAddress, String hatchAddress, String key) {
        String QaxhModule = getQaxhModule(userSafeAddress);
        Function addAuthorisedKey = new Function(
            "hatchCertifyingKeyAdd",
            Arrays.<Type>asList(
                new Address(hatchAddress),
                new Address(key)),
            Collections.<TypeReference<?>>emptyList()
        );
        return callNonViewFunction(QaxhModule, addAuthorisedKey);
    }

    @SimpleFunction(description="Remove a given key form L1 in a given Hatch")
    public String hatchCertifyingKeyRemove(String userSafeAddress, String hatchAddress, String key) {
        String QaxhModule = getQaxhModule(userSafeAddress);
        Function authorisedKeyRemove = new Function(
            "hatchCertifyingKeyRemove",
            Arrays.<Type>asList(
                new Address(hatchAddress),
                new Address(key)),
            Collections.<TypeReference<?>>emptyList()
        );
        return callNonViewFunction(QaxhModule, authorisedKeyRemove);
    }

   // HATCH-VARIABLES FUNCTION -------------------------------------------------

    @SimpleFunction(description="Update the Variable list in a given Hatch")
    public String hatchVariableSet(String userSafeAddress, String hatchAddress, String index, String data) {
        String QaxhModule = getQaxhModule(userSafeAddress);
        Function setVariable = new Function(
            "hatchVariableSet",
            Arrays.<Type>asList(
                new Address(hatchAddress),
                new Uint(new BigInteger(index)),
                new Utf8String(data)),
            Collections.<TypeReference<?>>emptyList()
        );
        return callNonViewFunction(QaxhModule, setVariable);
    }

    @SimpleFunction(description="get the variable registered at the given index")
    public String hatchVariableGet(String hatchAddress, int index) {
        String st_index = Integer.toString(index);
        Function getVariable = new Function(
            "variableGet",
            Collections.<Type>singletonList(new Uint(new BigInteger(st_index))),
            Collections.<TypeReference<?>>singletonList(new TypeReference<Utf8String>(){})
        );
        List<Utf8String> st = callViewFunction(hatchAddress, getVariable);
        return st.get(0).getValue().toString();
    }


  // HATCH-RELAYNODE FUNCTION -------------------------------------------------

    @SimpleFunction(description="return the index of a relaynode or 0 if the relaynode is not in the list")
    public String hatchRelayNodeIs(String hatchAddress, String relayNode) {
        Function isRelayNode = new Function(
            "relayNodeIs",
            Arrays.<Type>asList(
                new Utf8String(relayNode)),
            Collections.<TypeReference<?>>singletonList(new TypeReference<Uint256>(){})
        );
        List<Uint256> st = callViewFunction(hatchAddress, isRelayNode);
        return st.get(0).getValue().toString();
    }

    @SimpleFunction(description="Add a given RelayNode to L5")
    public String hatchRelayNodeAdd(String userSafeAddress, String hatchAddress, String relayNode) {
        String QaxhModule = getQaxhModule(userSafeAddress);
        Function addRelayNode = new Function(
            "hatchRelayNodeAdd",
             Arrays.<Type>asList(
                new Address(hatchAddress),
                new Utf8String(relayNode)),
            Collections.<TypeReference<?>>emptyList()
        );
        return callNonViewFunction(QaxhModule, addRelayNode);
    }
    @SimpleFunction(description="get the number of element in the RelayNode list")
    public int hatchRelayNodeNumberGet(String hatchAddress) {
        Function getRelayNodesNumbers = new Function(
            "relayNodesNumbersGet",
            Collections.<Type>emptyList(),
            Collections.<TypeReference<?>>singletonList(new TypeReference<Uint>(){})
        );
        List<Uint> st = callViewFunction(hatchAddress, getRelayNodesNumbers);
        return st.get(0).getValue().intValue();
    }

    @SimpleFunction(description="get the element from the RelayNode list at the given index")
    public String hatchRelayNodeGet(String hatchAddress, int index) {
        String st_index = Integer.toString(index);
        Function getRelayNodeUrl = new Function(
            "relayNodeGet",
            Collections.<Type>singletonList(new Uint(new BigInteger(st_index))),
            Collections.<TypeReference<?>>singletonList(new TypeReference<Utf8String>(){})
        );
        List<Utf8String> st = callViewFunction(hatchAddress, getRelayNodeUrl);
        return st.get(0).getValue().toString();
    }

    @SimpleFunction(description="Add a given RelayNode to L5")
    public String hatchRelayNodeRemove(String userSafeAddress, String hatchAddress, String index) {
        String QaxhModule = getQaxhModule(userSafeAddress);
        Function removeRelayNode = new Function(
            "hatchRelayNodeRemove",
            Arrays.<Type>asList(
                new Address(hatchAddress),
                new Uint(new BigInteger(index))),
            Collections.<TypeReference<?>>emptyList()
        );
        return callNonViewFunction(QaxhModule, removeRelayNode);
    }

  // HATCH-PARENTADDRESS FUNCTION -------------------------------------------------

    @SimpleFunction(description="Return the current parent address")
    public String hatchParentAddressGet(String hatchAddress) {
        Function parentAddressGet = new Function(
            "parentAddressGet",
            Collections.<Type>emptyList(),
            Arrays.<TypeReference<?>>asList(new TypeReference<Address>(){})
        );
        List<Address> st = callViewFunction(hatchAddress, parentAddressGet);
        return st.get(0).getValue().toString();
    }

    @SimpleFunction(description="Return the current hatch version")
    public String hatchVersionGet(String hatchAddress) {
        Function hatchVersionGet = new Function(
            "hatchVersionGet",
            Collections.<Type>emptyList(),
            Collections.<TypeReference<?>>singletonList(new TypeReference<Utf8String>(){})
        );
        List<Utf8String> st = callViewFunction(hatchAddress, hatchVersionGet);
        return st.get(0).getValue().toString();
    }



    //----------------------------------------CORPORATESAFE----------------------------------------

    /**
     * Returns the creator of a qaxh corporatesafe, or 0 if it is not in the SchemeSafe
     *
     * @param schemeSafeAddress Address of the SchemeSafe
     * @param corporateSafeAddress Address of the corporate safe
     * @return Address of the creator, 0 if it is not a qaxh safe
     */
    /*
    @SimpleFunction(description="Returns the creator of a corporate safe, or 0 if it is not in the SchemeSafe")
    public String isQaxhCorporateSafe(String schemeSafeAddress, String corporateSafeAddress)
    {
        Function f = new Function(
                "corporateSafes",
                Arrays.<Type>asList(new Address(corporateSafeAddress)),
                Arrays.<TypeReference<?>>asList(new TypeReference<Address>() {})
        );

        List<Address> lst = callViewFunction(schemeSafeAddress, f);
        return lst.get(0).toString();
    }
*/

    @SimpleFunction(description="Getter of the Safe type.")
    public int userIdentityGetSafeType(String safeAddress) {
        String QaxhModule;
        if (getQaxhModule(safeAddress) == "not a usersafe address") {
            QaxhModule = safeAddress;
        }
        else {
            QaxhModule = getQaxhModule(safeAddress);
        }
        Function function = new Function(
            "safeType",
            Collections.<Type>emptyList(),
            Collections.<TypeReference<?>>singletonList(new TypeReference<Uint8>(){})
        );
        List<Uint8> lst = callViewFunction(QaxhModule, function);
        if (lst.size() == 0) {
            return 0;
        }
        return lst.get(0).getValue().intValue();
    }

    @SimpleFunction(description="Retrieve corporate variables")
    public List<String> corporateGetVariables(String corporateSafeAddress) {
        List<String> ret = new ArrayList<String>();

        Function cidf = new Function(
            "accountCorporateId",
            Collections.<Type>emptyList(),
            Collections.<TypeReference<?>>singletonList(new TypeReference<Uint>(){})
        );
        List<Uint> cid = callViewFunction(corporateSafeAddress, cidf);
        ret.add(cid.get(0).getValue().toString());

        Function utlf = new Function(
            "creatorTrustLevel",
            Collections.<Type>emptyList(),
            Collections.<TypeReference<?>>singletonList(new TypeReference<Uint8>(){})
        );
        List<Uint8> utl = callViewFunction(corporateSafeAddress, utlf);
        ret.add(utl.get(0).getValue().toString());

        Function cdlf = new Function(
            "corporateDelegationLevel",
            Collections.<Type>emptyList(),
            Collections.<TypeReference<?>>singletonList(new TypeReference<Uint8>(){})
        );
        List<Uint8> cdl = callViewFunction(corporateSafeAddress, cdlf);
        ret.add(cdl.get(0).getValue().toString());

        Function cclf = new Function(
            "corporateCommitmentLevel",
            Collections.<Type>emptyList(),
            Collections.<TypeReference<?>>singletonList(new TypeReference<Uint8>(){})
        );
        List<Uint8> ccl = callViewFunction(corporateSafeAddress, cclf);
        ret.add(ccl.get(0).getValue().toString());

        Function crlf = new Function(
            "corporateRankLevel",
            Collections.<Type>emptyList(),
            Collections.<TypeReference<?>>singletonList(new TypeReference<Uint8>(){})
        );
        List<Uint8> crl = callViewFunction(corporateSafeAddress, crlf);
        ret.add(crl.get(0).getValue().toString());

        Function naf = new Function(
            "numberOfAdministrators",
            Collections.<Type>emptyList(),
            Collections.<TypeReference<?>>singletonList(new TypeReference<Uint>(){})
        );
        List<Uint> na = callViewFunction(corporateSafeAddress, naf);
        ret.add(na.get(0).getValue().toString());

        return ret;
    }

    @SimpleFunction(description="Getter of the QaxhMaster address referenced in the Corporate Safe")
    public String corporateKeyGetMaster(String corporateSafeAddress) {
        Function function = new Function(
            "qaxhMasterKey",
            Collections.<Type>emptyList(),
            Collections.<TypeReference<?>>singletonList(new TypeReference<Address>(){})
        );
        List<Address> lst = callViewFunction(corporateSafeAddress, function);
        return lst.get(0).getValue().toString();
    }

    @SimpleFunction(description="Return true if the safe has been activated.")
    public boolean corporateGetSafeActivation(String corporateSafeAddress) {
        Function function = new Function(
            "activated",
            Collections.<Type>emptyList(),
            Collections.<TypeReference<?>>singletonList(new TypeReference<Bool>(){})
        );
        List<Bool> lst = callViewFunction(corporateSafeAddress, function);
        return lst.get(0).getValue().booleanValue();
    }

    @SimpleFunction(description="Getter of the QGbody.")
    public String corporateGetIdentityBody(String corporateSafeAddress) {
        String Qbody = "QGbody";
        if (userIdentityGetSafeType(corporateSafeAddress) == 3) {
      Qbody = "QCbody";
    }
        Function function = new Function(
            Qbody,
            Collections.<Type>emptyList(),
            Collections.<TypeReference<?>>singletonList(new TypeReference<Utf8String>(){})
        );
        List<Utf8String> lst = callViewFunction(corporateSafeAddress, function);
        return lst.get(0).toString();
    }

    @SimpleFunction(description="Getter of the corporate keys.")
    public List<String> corporateKeysGet(String corporateSafeAddress) {
        Function getActiveKeys = new Function(
            "getActiveKeys",
            Collections.<Type>emptyList(),
            Collections.<TypeReference<?>>singletonList(
                    new TypeReference<DynamicArray<Address>>(){})
        );
        List<DynamicArray<Address>> keys = callViewFunction(
                        corporateSafeAddress,
                        getActiveKeys
        );

        List<String> ret = new ArrayList();
        for (Address addr : keys.get(0).getValue())
                ret.add(addr.toString());
        return ret;
    }

    @SimpleFunction(description="Getter of the corporate keys.")
    public List<String> corporateKeysGetPending(String corporateSafeAddress) {
        Function function = new Function(
            "getPendingKeys",
            Collections.<Type>emptyList(),
            Arrays.<TypeReference<?>>asList(new TypeReference<DynamicArray<Address>>(){})
        );
        List<DynamicArray<Address>> input = callViewFunction(corporateSafeAddress, function);
        List<String> output = new ArrayList();
        for(Address address : input.get(0).getValue()){
            output.add(address.toString());
        }
        return output;
    }

    @SimpleFunction(description="Return true if the safe doesn't contain the given key.")
    public boolean corporateIsNotAnOwnerUserAddress(String corporateSafeAddress, String userSafeAddress) {
        Function function = new Function(
            "isNotAnOwner",
            Collections.<Type>singletonList(new Address(userSafeAddress)),
            Collections.<TypeReference<?>>singletonList(new TypeReference<Bool>(){})
        );
        List<Bool> lst = callViewFunction(corporateSafeAddress, function);
        return lst.get(0).getValue().booleanValue();
    }

    // //Kevin_Modified: change the "isNotAnOwner" solidity call to "isActivated" Solidity call
    // @SimpleFunction(description="Return true if the safe doesn't contain the given key.")
    // public boolean isNotAnOwnerCorporateUserAddress(String corporateSafeAddress, String userSafeAddress) {
    //     Function function = new Function(
    //         "isActivated",
    //         Collections.<Type>singletonList(new Address(userSafeAddress)),
    //         Collections.<TypeReference<?>>singletonList(new TypeReference<Bool>(){})
    //     );
    //     List<Bool> lst = callViewFunction(corporateSafeAddress, function);
    //     return lst.get(0).getValue().booleanValue();
    // }

    @SimpleFunction(description="Retrieve the list of children")
    public List<String> corporateChildrenGet(String corporateSafeAddress)
    {
        Function getChildren = new Function(
            "getChildren",
            Collections.<Type>emptyList(),
            Collections.<TypeReference<?>>singletonList(
                    new TypeReference<DynamicArray<Address>>(){})
        );
        List<DynamicArray<Address>> keys = callViewFunction(
                        corporateSafeAddress,
                        getChildren
        );

        List<String> ret = new ArrayList();
        for (Address addr : keys.get(0).getValue())
                ret.add(addr.toString());
        return ret;
    }

    @SimpleFunction(description="Get the address of the parent safe")
    public String corporateGetParentSafe(String childSafeAddress)
    {
        Function parentSafe = new Function(
            "parentSafe",
            Collections.<Type>emptyList(),
            Collections.<TypeReference<?>>singletonList(
                new TypeReference<Address>() {})
        );

        List<Address> ret = callViewFunction(childSafeAddress, parentSafe);
        return ret.get(0).getValue().toString();
    }

    @SimpleFunction(description="Transaction details")
    public List<String> corporateTransactionDetailsGet(String corporateSafe,
            String txid)
    {
        Function f = new Function(
            "transactionsList",
            Collections.<Type>singletonList(new Uint(new BigInteger(txid))),
            Arrays.<TypeReference<?>>asList(
                new TypeReference<Uint256>() {}, // txId
                new TypeReference<Address>() {}, // dest
                new TypeReference<Uint256>() {}, // amount
                new TypeReference<Address>() {}, // token
                new TypeReference<Bool>() {}, // overriden
                new TypeReference<Uint256>() {}) // next
        );

        Function fExectuable = new Function(
            "isCorporateTransactionExecutable",
            Collections.<Type>singletonList(new Uint(new BigInteger(txid))),
            Arrays.<TypeReference<?>>asList(new TypeReference<Bool>() {}));

        List<Type> res = callViewFunction(corporateSafe, f);
        List<Bool> executable = callViewFunction(corporateSafe, fExectuable);
        List<String> ret = new ArrayList();

        // Don't need next
        for (int i = 0; i < 5; i++)
            ret.add(res.get(i).getValue().toString());
        ret.add(executable.get(0).getValue().toString());

        return ret;
    }

    @SimpleFunction(description="Return the list of pending transactions")
    public List<String> corporateTransactionsGetPending(String corporateSafe) {
        Function f = new Function(
            "getPendingTransactions",
            Collections.<Type>emptyList(),
            Arrays.<TypeReference<?>>asList(
                    new TypeReference<DynamicArray<Uint256>>(){})
        );

        List<DynamicArray<Uint256>> txs = callViewFunction(corporateSafe, f);
        List<String> ret = new ArrayList();
        for (Uint256 tx : txs.get(0).getValue())
            ret.add(tx.getValue().toString());
        return ret;
    }

    @SimpleFunction(description="Return the list of pending Ttag events")
    public List<String> corporateTtagGetPending(String corporateSafe) {
        Function f = new Function(
            "getPendingCertifyEvents",
            Collections.<Type>emptyList(),
            Collections.<TypeReference<?>>singletonList(
                    new TypeReference<DynamicArray<Uint256>>(){})
        );

        List<DynamicArray<Uint256>> txs = callViewFunction(corporateSafe, f);
        List<String> ret = new ArrayList();
        for (Uint256 tx : txs.get(0).getValue())
            ret.add(tx.getValue().toString());

        return ret;
    }

    @SimpleFunction(description="TtagEvent details")
    public List<String> corporateTtagDetailsGet(String corporateSafe, String eventId) {
        Function f = new Function(
            "certifyEvents",
            Arrays.<Type>asList(new Uint256(new BigInteger(eventId))),
            Arrays.<TypeReference<?>>asList(
                new TypeReference<Uint256>() {}, // eventId
                new TypeReference<Uint256>() {}, // data
                new TypeReference<Bool>() {}, // overreventIdden
                new TypeReference<Uint256>() {} // next
            ));

        Function fExecutable = new Function(
            "isCorporateCertifyEventExecutable",
            Collections.<Type>singletonList(new Uint(new BigInteger(eventId))),
            Arrays.<TypeReference<?>>asList(new TypeReference<Bool>() {}));

        List<Type> res = callViewFunction(corporateSafe, f);
        List<Bool> executable = callViewFunction(corporateSafe, fExecutable);

        List<String> ret = new ArrayList();

        // We don't need next
        for (int i = 0; i < 3; i++)
            ret.add(res.get(i).getValue().toString());
        ret.add(executable.get(0).getValue().toString());

        return ret;
    }

    @SimpleFunction(description="Get voters for a transaction")
    public List<String> corporateTransactionVotersGet(String corporateSafe, String txid) {
        Function fid = new Function(
            "getVoteId",
            Arrays.<Type>asList(
                new Uint256(new BigInteger(txid)),
                new Bool(true)),
            Arrays.<TypeReference<?>>asList(
                new TypeReference<Uint256>() {}
        ));

        List<Uint256> vote = callViewFunction(corporateSafe, fid);

        Function getVoters = new Function(
            "getVoters",
            Arrays.<Type>asList(
                vote.get(0)),
            Arrays.<TypeReference<?>>asList(
                new TypeReference<DynamicArray<Address>>() {}
            ));

        List<DynamicArray<Address>> voters = callViewFunction(corporateSafe, getVoters);

        List<String> ret = new ArrayList();
        for (Address v : voters.get(0).getValue())
            ret.add(v.toString());

        return ret;
    }

    @SimpleFunction(description="Get voters for a Ttag event")
    public List<String> corporateTtagVotersGet(String corporateSafe, String eventId) {
        Function fid = new Function(
            "getVoteId",
            Arrays.<Type>asList(
                new Uint256(new BigInteger(eventId)),
                new Bool(false)),
            Arrays.<TypeReference<?>>asList(
                new TypeReference<Uint256>() {}
        ));

        List<Uint256> vote = callViewFunction(corporateSafe, fid);

        Function getVoters = new Function(
            "getVoters",
            Arrays.<Type>asList(
                vote.get(0)),
            Arrays.<TypeReference<?>>asList(
                new TypeReference<DynamicArray<Address>>() {}
            ));

        List<DynamicArray<Address>> voters = callViewFunction(corporateSafe, getVoters);

        List<String> ret = new ArrayList();
        for (Address v : voters.get(0).getValue())
            ret.add(v.toString());

        return ret;
    }

    @SimpleFunction(description="Check if a certify event was executed in this tx")
    public List<String> getExecutedCorporateEvent(String tx) {
        try {
            Event event = new Event("ExecutedCertifyEvent",
                    Collections.<TypeReference<?>>emptyList(),
                    Arrays.<TypeReference<?>>asList(
                        new TypeReference<Uint256>() {},
                        new TypeReference<Uint256>() {}));

            String encodedEvent = EventEncoder.encode(event);

            TransactionReceipt recpt =
                web3.ethGetTransactionReceipt(tx)
                .sendAsync()
                .get()
                .getTransactionReceipt();

            List<Log> logs = recpt.getLogs();
            // One single executed event per transaction
            if (logs.size() != 1)
                return new ArrayList();

            Log log = logs.get(0);
            if (!log.getTopics().get(0).equals(encodedEvent))
                return new ArrayList();

            List<Type> values = FunctionReturnDecoder.decode(
                    log.getData(),
                    event.getNonIndexedParameters());

            List<String> ret = new ArrayList();
            ret.add(recpt.getFrom());
            for (Type i : values)
                ret.add(i.getValue().toString());
            return ret;
        } catch (Exception e) {
            return new ArrayList();
        }
    }

    // blocs user extension

    @SimpleFunction(description="Create a transaction")
    public String corporateTransactionCreate(
        String userSafe, String corporateSafe, String dest, String amount,
        String token)
    {
        Function f = new Function(
            "createTransaction",
            Arrays.<Type>asList(
                new Address(corporateSafe),
                new Address(dest),
                new Uint(new BigInteger(amount)),
                new Address(token)),
            Arrays.<TypeReference<?>>asList(
                new TypeReference<Uint>() {})
        );

        return callNonViewFunction(userSafe, f);
    }

    @SimpleFunction(description="Delete a transaction")
    public String corporateTransactionDelete(String userSafe, String corporateSafe,
            String txid)
    {
        Function f = new Function(
            "deleteCorporateTransaction",
            Arrays.<Type>asList(
                new Address(corporateSafe),
                new Uint256(new BigInteger(txid))),
            Collections.<TypeReference<?>>emptyList()
        );

        return callNonViewFunction(userSafe, f);
    }

    @SimpleFunction(description="Sign a transaction")
    public String corporateTransactionSign(
            String userSafe, String corporateSafe, String txid)
    {
        Function f = new Function(
            "signTransaction",
            Arrays.<Type>asList(
                new Address(corporateSafe),
                new Uint(new BigInteger(txid))),
            Collections.<TypeReference<?>>emptyList()
        );

        return callNonViewFunction(userSafe, f);
    }

    @SimpleFunction(description="Execute a transaction (unsafe: push and not pull)")
    public String corporateTransactionExecuteUnsafe(
        String originatorUserSafe,
        String originatorCorporateSafe,
        String txid)
    {
        Function f = new Function(
            "unsafeExecuteTransaction",
            Arrays.<Type>asList(
                new Address(originatorCorporateSafe),
                new Uint(new BigInteger(txid))),
            Collections.<TypeReference<?>>emptyList()
        );

        return callNonViewFunction(originatorUserSafe, f);
    }

    @SimpleFunction(description="Withdraw a transaction from another corporate safe")
    public String corporateTransactionWithdraw(
            String beneficiaryUserSafe, String beneficiaryCorporateSafe,
      String originatorCorporateSafe, String txid)
    {
        Function f = new Function(
            "withdrawTransactionFrom",
            Arrays.<Type>asList(
                new Address(beneficiaryCorporateSafe),
                new Address(originatorCorporateSafe),
                new Uint(new BigInteger(txid))),
            Collections.<TypeReference<?>>emptyList()
        );

        return callNonViewFunction(beneficiaryUserSafe, f);
    }

    @SimpleFunction(description="Create a Ttag event")
    public String corporateTtagCreate(
        String userSafe, String corporateSafe, String data)
    {
        Function f = new Function(
            "createCertifyEvent",
            Arrays.<Type>asList(
                new Address(corporateSafe),
                new Uint(new BigInteger(data))),
            Arrays.<TypeReference<?>>asList(
                new TypeReference<Uint>() {})
        );

        return callNonViewFunction(userSafe, f);
    }

    @SimpleFunction(description="Delete a corporate Ttag event")
    public String corporateTtagDelete(String userSafe, String corporateSafe,
            String eventId)
    {
        Function f = new Function(
            "deleteCorporateCertifyEvent",
            Arrays.<Type>asList(
                new Address(corporateSafe),
                new Uint256(new BigInteger(eventId))),
            Collections.<TypeReference<?>>emptyList()
        );

        return callNonViewFunction(userSafe, f);
    }

    @SimpleFunction(description="Sign a Ttag event")
    public String corporateTtagSign(
            String userSafe, String corporateSafe, String eventId)
    {
        Function f = new Function(
            "signCertifyEvent",
            Arrays.<Type>asList(
                new Address(corporateSafe),
                new Uint(new BigInteger(eventId))),
            Collections.<TypeReference<?>>emptyList()
        );

        return callNonViewFunction(userSafe, f);
    }

    @SimpleFunction(description="Execute a Ttag event")
    public String corporateTtagExecute(
            String userSafe, String corporateSafe, String eventId)
    {
        Function f = new Function(
            "executeCertifyEvent",
            Arrays.<Type>asList(
                new Address(corporateSafe),
                new Uint(new BigInteger(eventId))),
            Collections.<TypeReference<?>>emptyList()
        );

        return callNonViewFunction(userSafe, f);
    }

    @SimpleFunction(description="Accept a pending key in a corporate.")
    public String corporateKeyInSignAccept(String corporateSafeAddress, String userSafeAddress) {
        String QaxhModule = getQaxhModule(userSafeAddress);
        Function function = new Function(
            "acceptKey",
            Collections.<Type>singletonList(new Address(corporateSafeAddress)),
            Collections.<TypeReference<?>>emptyList()
        );
        return callNonViewFunction(QaxhModule, function);
    }


  @SimpleFunction(description="Getter of the Safe version.")
    public String userIdentityGetSafeVersion(String safeAddress) {
        String QaxhModule;
        if (getQaxhModule(safeAddress) == "not a usersafe address") {
            QaxhModule = safeAddress;
        }
        else {
            QaxhModule = getQaxhModule(safeAddress);
        }
        Function function = new Function(
            "safeVersion",
            Collections.<Type>emptyList(),
            Collections.<TypeReference<?>>singletonList(new TypeReference<Utf8String>(){})
        );
        List<Utf8String> lst = callViewFunction(QaxhModule, function);
        if (lst.size() == 0) {
            return "0";
        }
        return lst.get(0).toString();
    }


@SimpleFunction(description="Getter of the safe's customerId.")
    public String userIdentityGetCustomerId(String safeAddress) {
  // should not be used
        String QaxhModule;
        if (getQaxhModule(safeAddress) == "not a usersafe address") {
            QaxhModule = safeAddress;
        }
        else {
            QaxhModule = getQaxhModule(safeAddress);
        }
        Function function = new Function(
            "customerId",
            Collections.<Type>emptyList(),
            Collections.<TypeReference<?>>singletonList(new TypeReference<Utf8String>(){})
        );
        List<Utf8String> lst = callViewFunction(QaxhModule, function);
        if (lst.size() == 0) {
            return "error: no customerId";
        }
        return lst.get(0).getValue().toString();
    }


    @SimpleFunction(description="Add a safe in the list of children")
    public String corporateChildAddInto(String userSafe, String corporateSafe,
        String childSafe)
    {
        Function addChild = new Function(
            "addChild",
            Arrays.<Type>asList(
                new Address(corporateSafe),
                new Address(childSafe)),
            Collections.<TypeReference<?>>emptyList()
        );

        return callNonViewFunction(userSafe, addChild);
    }

    @SimpleFunction(description="Accept request to be an admin of a child")
    public String corporateChildAdminRequestAccept(String userSafe,
        String corporateSafe, String childSafe)
    {
        Function acceptChildAdminRequest = new Function(
            "acceptChildAdminRequest",
            Arrays.<Type>asList(
                new Address(corporateSafe),
                new Address(childSafe)),
            Collections.<TypeReference<?>>emptyList()
        );

        return callNonViewFunction(userSafe, acceptChildAdminRequest);
    }

    @SimpleFunction(description="Start a vote to add a key to a child safe")
    public String corporateChildAddkeyCreateVote(String userSafe, String corporateSafe,
        String childSafe, String newKey, boolean hasOverride)
    {
        Function startVote = new Function(
            "startVoteAddKeyInChild",
            Arrays.<Type>asList(
                new Address(corporateSafe),
                new Address(childSafe),
                new Address(newKey),
                new Bool(hasOverride)),
            Collections.<TypeReference<?>>emptyList()
        );

        return callNonViewFunction(userSafe, startVote);
    }

    @SimpleFunction(description="Vote to accept a key in a child")
    public String corporateChildAcceptKeyIn(String userSafe, String corporateSafe,
        String childSafe, String key)
    {
        Function accept = new Function(
            "voteAcceptKeyInChild",
            Arrays.<Type>asList(
                new Address(corporateSafe),
                new Address(childSafe),
                new Address(key)),
            Collections.<TypeReference<?>>emptyList()
        );

        return callNonViewFunction(userSafe, accept);
    }

    @SimpleFunction(description="Remove key from child")
    public String corporateChildRemoveKeyFrom(String userSafe, String corporateSafe,
        String childSafe, String key)
    {
        Function remove = new Function(
            "removeKeyFromChild",
            Arrays.<Type>asList(
                new Address(corporateSafe),
                new Address(childSafe),
                new Address(key)),
            Collections.<TypeReference<?>>emptyList());

        return callNonViewFunction(userSafe, remove);
    }

////////////////////////////////////////////////////////////////////////////////////////////////
////////////////////////////////////////////////////////////////////////////////////////////////


    /*Fonctions demandées par Cyril, à faire vérifier*/

    //Renvoie true or false si la clé entrée est override
    @SimpleFunction(description="Read if a key is override or not")
    public boolean corporateHasOverride (String childSafe, String key)
    {
        Function check = new Function(
            "hasOverride",    // peut être ammené à être appelée  "hasOveride"
                Arrays.<Type>asList(new Address(key)),
                Collections.<TypeReference<?>>singletonList(new TypeReference<Bool>() {
                })
        );
        List<Bool> lst = callViewFunction(childSafe, check);
        return lst.get(0).getValue().booleanValue();
    }

    //Renvoie true/false si le voter a déjà signé ou non
    @SimpleFunction(description="Check if a voter has voted")
    public boolean corporateHasVoted (String corporateSafe, String voteId, String voter)
    {
        Function check = new Function (
            "hasVoted",
            Arrays.<Type>asList(
                new Uint256(new BigInteger(voteId)),
                new Address(voter)),
            Collections.<TypeReference<?>>singletonList(new TypeReference<Bool>(){
            })
        );
        List<Bool>lst = callViewFunction(corporateSafe, check);
        return lst.get(0).getValue().booleanValue();
    }

    //Renvoi le nombre d'administrateurs ayant déjà votés
    @SimpleFunction(description="Check the number of voters on a vote")
    public int corporateCountVote (String corporateSafe, String voteId)
    {
        Function check = new Function (
            "countVotes",
            Arrays.<Type>asList(new Uint256 (new BigInteger(voteId)) ),
            Collections.<TypeReference<?>>singletonList(new TypeReference<Uint256>(){
            })
        );
        List<Uint256>lst = callViewFunction(corporateSafe, check);
        return lst.get(0).getValue().intValue();
    }


    ////////////////////////////////////////////////////////////////////////////////////////////
    //////////////////              Fonction en lien EME/EEUR           ////////////////////////
    ////////////////////////////////////////////////////////////////////////////////////////////

    @SimpleFunction(description="Get all active EME in the EEUR")
    public List<String> emoneyGetActiveEME (String eMoney)
    {
        Function get = new Function (
            "getListActiveEME",
            Collections.<Type>emptyList(),
            Arrays.<TypeReference<?>>asList(new TypeReference<DynamicArray<Address>>(){})
        );
        List<DynamicArray<Address>> keys = callViewFunction(eMoney, get);
        List<String> ret = new ArrayList();
        for (Address addr : keys.get(0).getValue()){
            ret.add(addr.toString());
        }
        return ret;
    }

    @SimpleFunction(description="Get all active EME in the EEUR")
    public List<String> emoneyGetAllEME (String eMoney)
    {
        Function get = new Function (
            "getListAllEME",
            Collections.<Type>emptyList(),
            Arrays.<TypeReference<?>>asList(new TypeReference<DynamicArray<Address>>(){})
        );
        List<DynamicArray<Address>> keys = callViewFunction(eMoney, get);
        List<String> ret = new ArrayList();
        for (Address addr : keys.get(0).getValue()){
            ret.add(addr.toString());
        }
        return ret;
    }

    @SimpleFunction(description="check CID in the EEUR")
    public boolean emoneyGetAcceptedCID (String eMoney, String customerID)
    {
        Function get = new Function (
            "checkCustomerId",
            Arrays.<Type>asList(new Uint256(new BigInteger(customerID))),
            Collections.<TypeReference<?>>singletonList(new TypeReference<Bool>(){})
        );
        List<Bool> lst = callViewFunction(eMoney, get);
        return lst.get(0).getValue().booleanValue();
    }


    // fonction eMoney

    @SimpleFunction(description="Get all the info (limit/deliver/ratio) of an EME")
    public List<String> emeGetinfo(String eMoney, String EMEsafe)
    {
        Function get = new Function (
            "getEMEInformations",
            Arrays.<Type>asList(new Address(EMEsafe)),
            Arrays.<TypeReference<?>>asList(new TypeReference<DynamicArray<Uint256>>(){})
        );
        List<DynamicArray<Uint256>> infos = callViewFunction(eMoney, get);
        List<String> ret = new ArrayList();
        for (Uint256 nbr : infos.get(0).getValue())
            ret.add(nbr.getValue().toString());

        return ret;
    }


    //pas besoin pour le moment mais fonctionne
    /*
    @SimpleFunction(description="Get all active and remove EME in the EEUR")
    public List<String> emoneyGetAllEME (String eMoney)
    {
        Function get = new Function (
            "getListAllEME",
            Collections.<Type>emptyList(),
            Arrays.<TypeReference<?>>asList(new TypeReference<DynamicArray<Address>>(){})
        );
        List<DynamicArray<Address>> keys = callViewFunction(eMoney, get);
        List<String> ret = new ArrayList();
        for (Address addr : keys.get(0).getValue()){
            ret.add(addr.toString());
        }
        return ret;
    }*/

    //Need to check the use of Bytes32

    //regrouper en getEmeVariables

    @SimpleFunction(description="get variables of EME")
    public List<String> emeGetVariables (String EMESafe)
    {
        List<String> result = new ArrayList<String>();

        Function get_brand_name = new Function (
            "brandName",
            Collections.<Type>emptyList(),
            Collections.<TypeReference<?>>singletonList(new TypeReference<Utf8String>(){
            })
        );
        List<Utf8String> lst_bn = callViewFunction(EMESafe, get_brand_name);
        result.add(lst_bn.get(0).toString());

        Function get_API_transfer = new Function (
            "API_EEURObyTransfer",
            Collections.<Type>emptyList(),
            Collections.<TypeReference<?>>singletonList(new TypeReference<Utf8String>(){
            })
        );
        List<Utf8String> lst_v = callViewFunction(EMESafe, get_API_transfer);
        result.add(lst_v.get(0).toString());

        Function get_API_credit = new Function (
            "API_Credittransfer",
            Collections.<Type>emptyList(),
            Collections.<TypeReference<?>>singletonList(new TypeReference<Utf8String>(){
            })
        );
        List<Utf8String> lst_ct = callViewFunction(EMESafe, get_API_credit);
        result.add(lst_ct.get(0).toString());

        Function get_API_Card = new Function (
            "API_EEURObyCard",
            Collections.<Type>emptyList(),
            Collections.<TypeReference<?>>singletonList(new TypeReference<Utf8String>(){
            })
        );
        List<Utf8String> lst_c = callViewFunction(EMESafe, get_API_Card);
        result.add(lst_c.get(0).toString());

        Function get_refund = new Function (
            "API_refund",
            Collections.<Type>emptyList(),
            Collections.<TypeReference<?>>singletonList(new TypeReference<Utf8String>(){
            })
        );
        List<Utf8String> lst_r = callViewFunction(EMESafe, get_refund);
        result.add(lst_r.get(0).toString());

        Function get_tarification = new Function (
            "API_tarification",
            Collections.<Type>emptyList(),
            Collections.<TypeReference<?>>singletonList(new TypeReference<Utf8String>(){
            })
        );
        List<Utf8String> lst_t = callViewFunction(EMESafe, get_tarification);
        result.add(lst_t.get(0).toString());

        Function get_IBAN = new Function (
            "IBAN",
            Collections.<Type>emptyList(),
            Collections.<TypeReference<?>>singletonList(new TypeReference<Utf8String>(){
            })
        );
        List<Utf8String> lst_IBAN = callViewFunction(EMESafe, get_IBAN);
        result.add(lst_IBAN.get(0).toString());

        Function get_hash = new Function (
            "hash_terms_of_use",
            Collections.<Type>emptyList(),
            Collections.<TypeReference<?>>singletonList(new TypeReference<Utf8String>(){
            })
        );
        List<Utf8String> lst_tof = callViewFunction(EMESafe, get_hash);
        result.add(lst_tof.get(0).toString());

        Function get_issuance = new Function (
            "date_issuance_TOU",
            Collections.<Type>emptyList(),
            Collections.<TypeReference<?>>singletonList(new TypeReference<Utf8String>(){
            })
        );
        List<Utf8String> lst_iss = callViewFunction(EMESafe, get_issuance);
        result.add(lst_iss.get(0).toString());

        Function get_version = new Function (
            "version_TOU",
            Collections.<Type>emptyList(),
            Collections.<TypeReference<?>>singletonList(new TypeReference<Utf8String>(){
            })
        );
        List<Utf8String> lst_ver = callViewFunction(EMESafe, get_version);
        result.add(lst_ver.get(0).toString());

        return result;
    }

    @SimpleFunction(description="Get CID of EME (should be 0)")
    public int emeGetCustomerId (String EMESafe)
    {
        Function get_cid = new Function (
            "CID",
            Collections.<Type>emptyList(),
            Collections.<TypeReference<?>>singletonList(new TypeReference<Uint256>(){
            })
        );
        List<Uint256> lst_cid = callViewFunction(EMESafe, get_cid);
        return lst_cid.get(0).getValue().intValue();
    }

    @SimpleFunction(description="Get the max amount that EMEs can refund")
    public int emoneyGetMaxAmountRefund (String eMoney)
    {
        Function get_cid = new Function (
            "maxRefund",
            Collections.<Type>emptyList(),
            Collections.<TypeReference<?>>singletonList(new TypeReference<Uint256>(){
            })
        );
        List<Uint256> lst_cid = callViewFunction(eMoney, get_cid);
        return lst_cid.get(0).getValue().intValue();
    }

    @SimpleFunction(description="get the address of the EME for refund (the one with the highest ratio)")
    public String emoneyGetRefundEME (String eMoney, String amount)
    {
        Function get = new Function (
            "bestRefundEME",
            Arrays.<Type>asList(new Uint256(new BigInteger(amount))),
            Collections.<TypeReference<?>>singletonList(new TypeReference<Address>(){
            })
        );
        List<Address> lst = callViewFunction(eMoney, get);
        return lst.get(0).getValue().toString();
    }

    //////////////////////////////////////////////////////////////////////////////////////////////////
    /////////////////////////////////          MandateSafe         ///////////////////////////////////
    //////////////////////////////////////////////////////////////////////////////////////////////////


    @SimpleFunction(description="Return all variables of the mandate safe in a list.")
    public List<String> mandateGetSafeVariables(String mandateSafeAddress) {
        List<String> result = new ArrayList<String>();

        Function parent = new Function (
            "parentSafeAddress",
            Collections.<Type>emptyList(),
            Collections.<TypeReference<?>>singletonList(new TypeReference<Address>(){} )
        );
        result.add(callViewFunction(mandateSafeAddress, parent).get(0).toString());

        Function sci = new Function (
            "sci",
            Collections.<Type>emptyList(),
            Collections.<TypeReference<?>>singletonList(new TypeReference<Utf8String>(){} )
        );
        result.add(callViewFunction(mandateSafeAddress, sci).get(0).toString());

        Function creditorName = new Function (
            "creditorName",
            Collections.<Type>emptyList(),
            Collections.<TypeReference<?>>singletonList(new TypeReference<Utf8String>(){} )
        );
        result.add(callViewFunction(mandateSafeAddress, creditorName).get(0).toString());

        Function thirdParty = new Function (
            "creditorThirdParty",
            Collections.<Type>emptyList(),
            Collections.<TypeReference<?>>singletonList(new TypeReference<Utf8String>(){} )
        );
        result.add(callViewFunction(mandateSafeAddress, thirdParty).get(0).toString());

        Function label = new Function (
            "serviceLabel",
            Collections.<Type>emptyList(),
            Collections.<TypeReference<?>>singletonList(new TypeReference<Utf8String>(){} )
        );
        result.add(callViewFunction(mandateSafeAddress, label).get(0).toString());

        Function ddType = new Function (
            "directDebitType",
            Collections.<Type>emptyList(),
            Collections.<TypeReference<?>>singletonList(new TypeReference<Uint8>(){} )
        );
        List<Uint8> list = callViewFunction(mandateSafeAddress, ddType);
        result.add(list.get(0).getValue().toString());

        Function mandateType = new Function (
            "mandateType",
            Collections.<Type>emptyList(),
            Collections.<TypeReference<?>>singletonList(new TypeReference<Uint8>(){} )
        );
        list = callViewFunction(mandateSafeAddress, mandateType);
        result.add(list.get(0).getValue().toString());

        Function maxValue = new Function (
            "maxValue",
            Collections.<Type>emptyList(),
            Collections.<TypeReference<?>>singletonList(new TypeReference<Uint256>(){} )
        );
        List<Uint256> listt = callViewFunction(mandateSafeAddress, maxValue);
        result.add(listt.get(0).getValue().toString());

        Function minPeriod = new Function (
            "minPeriod",
            Collections.<Type>emptyList(),
            Collections.<TypeReference<?>>singletonList(new TypeReference<Uint256>(){} )
        );
        listt = callViewFunction(mandateSafeAddress, minPeriod);
        result.add(listt.get(0).getValue().toString());

        Function urmHeader = new Function (
            "urmHeader",
            Collections.<Type>emptyList(),
            Collections.<TypeReference<?>>singletonList(new TypeReference<Uint256>(){} )
        );
        listt = callViewFunction(mandateSafeAddress, urmHeader);
        result.add(listt.get(0).getValue().toString());

        Function customerID = new Function (
            "customerID",
            Collections.<Type>emptyList(),
            Collections.<TypeReference<?>>singletonList(new TypeReference<Uint8>(){} )
        );
        list = callViewFunction(mandateSafeAddress, customerID);
        result.add(list.get(0).getValue().toString());

        Function logoCode = new Function (
            "creditorLogoCode",
            Collections.<Type>emptyList(),
            Collections.<TypeReference<?>>singletonList(new TypeReference<Utf8String>(){} )
        );
        result.add(callViewFunction(mandateSafeAddress, logoCode).get(0).toString());

        Function apiConfirmation = new Function (
            "api_confirmation",
            Collections.<Type>emptyList(),
            Collections.<TypeReference<?>>singletonList(new TypeReference<Utf8String>(){} )
        );
        result.add(callViewFunction(mandateSafeAddress, apiConfirmation).get(0).toString());

        Function apiRevocation = new Function (
            "api_revocation",
            Collections.<Type>emptyList(),
            Collections.<TypeReference<?>>singletonList(new TypeReference<Utf8String>(){} )
        );
        result.add(callViewFunction(mandateSafeAddress, apiRevocation).get(0).toString());

        Function apiTou = new Function (
            "api_tou",
            Collections.<Type>emptyList(),
            Collections.<TypeReference<?>>singletonList(new TypeReference<Utf8String>(){} )
        );
        result.add(callViewFunction(mandateSafeAddress, apiTou).get(0).toString());

        Function apiGdpr = new Function (
            "api_gdpr",
            Collections.<Type>emptyList(),
            Collections.<TypeReference<?>>singletonList(new TypeReference<Utf8String>(){} )
        );
        result.add(callViewFunction(mandateSafeAddress, apiGdpr).get(0).toString());

        Function touVersion = new Function (
            "touVersion",
            Collections.<Type>emptyList(),
            Collections.<TypeReference<?>>singletonList(new TypeReference<Utf8String>(){} )
        );
        result.add(callViewFunction(mandateSafeAddress, touVersion).get(0).toString());

        Function touIssuanceDate = new Function (
            "touIssuanceDate",
            Collections.<Type>emptyList(),
            Collections.<TypeReference<?>>singletonList(new TypeReference<Utf8String>(){} )
        );
        result.add(callViewFunction(mandateSafeAddress, touIssuanceDate).get(0).toString());

        Function touHash = new Function (
            "touHash",
            Collections.<Type>emptyList(),
            Collections.<TypeReference<?>>singletonList(new TypeReference<Utf8String>(){} )
        );
        result.add(callViewFunction(mandateSafeAddress, touHash).get(0).toString());


        return result;
    }


    @SimpleFunction(description="Return mandate data (= URM, debtorSafeAddress, hash and status) for every mandate of a debtor")
    public List<List<String>> mandateGetDebtorData(String mandateSafeAddress, String debtorSafeAddress) {

        Function functionUrmHeader = new Function (
                "urmHeader",
                Collections.<Type>emptyList(),
                Collections.<TypeReference<?>>singletonList(new TypeReference<Uint256>(){} )
        );
        List<Uint256> urmHeader = callViewFunction(mandateSafeAddress, functionUrmHeader);
        BigInteger header = urmHeader.get(0).getValue();
        header = header.multiply(BigInteger.valueOf(10).pow(10));

        Function functionUrmBody = new Function (
                "debtorToUrmBody",
                Collections.<Type>singletonList(new Address(debtorSafeAddress)),
                Collections.<TypeReference<?>>singletonList(new TypeReference<Uint256>(){} )
        );
        List<Uint256> urmBody = callViewFunction(mandateSafeAddress, functionUrmBody);
        header = header.add(urmBody.get(0).getValue());
        header = header.multiply(BigInteger.valueOf(10).pow(4));

        Function functionFooterNonce = new Function (
                "urmFooterNonce",
                Collections.<Type>singletonList(new Address(debtorSafeAddress)),
                Collections.<TypeReference<?>>singletonList(new TypeReference<Uint256>(){} )
        );
        List<Uint256> urmFooterNonce = callViewFunction(mandateSafeAddress, functionFooterNonce);
        int footerNonce = urmFooterNonce.get(0).getValue().intValue();

        List<List<String>> result = new ArrayList<List<String>>();
        BigInteger urm;
        for (int i = 1; i <= footerNonce; i++) {
            urm = header.add(BigInteger.valueOf(i));
            result.add(mandateGetUrmData(mandateSafeAddress, String.valueOf(urm)));
        }
        return result;
    }


    @SimpleFunction(description="Return mandate data (= URM, debtorSafeAddress, hash and status) of a mandate")
    public List<String> mandateGetUrmData(String mandateSafeAddress, String urm) {

        Function getData = new Function (
                "mandates",
                Collections.<Type>singletonList(new Uint256(new BigInteger(urm))),
                Arrays.<TypeReference<?>>asList(
                        new TypeReference<Uint256>(){},     //urm
                        new TypeReference<Address>(){},     //debtorSafeAddress
                        new TypeReference<Utf8String>(){},  //hash
                        new TypeReference<Uint8>(){},       //status
                        new TypeReference<Uint256>(){},     //confirmationDate
                        new TypeReference<Uint256>(){}      //revocationDate
                )
        );
        List<String> result = new ArrayList<String>();
        List<Type> data = callViewFunction(mandateSafeAddress, getData);
        result.add(data.get(0).getValue().toString());
        result.add(data.get(1).toString());
        result.add(data.get(2).toString());
        result.add(data.get(3).getValue().toString());
        result.add(data.get(4).getValue().toString());
        result.add(data.get(5).getValue().toString());
        return(result);
    }

    @SimpleFunction(description="Return the last reserved urm for a debtor")
    public String mandateGetLastUrm(String mandateSafeAddress, String debtorSafeAddress) {

        Function lastUrm = new Function (
                "getLastUrm",
                Collections.<Type>singletonList(new Address(debtorSafeAddress)),
                Collections.<TypeReference<?>>singletonList(new TypeReference<Uint256>() {})
        );
        List<Uint256> list = callViewFunction(mandateSafeAddress, lastUrm);
        return list.get(0).getValue().toString();
    }

    @SimpleFunction(description="Reserve an urm for the user")
    public String mandateDebtorSignUrm(String mandateSafeAddress, String debtorSafeAddress) {

        Function signUrm = new Function (
                "mandateSignUrm",
                Collections.<Type>singletonList(new Address(mandateSafeAddress)),
                Collections.<TypeReference<?>>emptyList()
        );
        return callNonViewFunction(debtorSafeAddress, signUrm);
    }

    @SimpleFunction(description="Make the mandate active")
    public String mandateDebtorSignCreate(String mandateSafeAddress, String debtorSafeAddress, String urm, String mandateHash) {

        Function signCreate = new Function (
                "mandateSignCreate",
                Arrays.<Type>asList(
                        new Address(mandateSafeAddress),
                        new Uint256(new BigInteger(urm)),
                        new Utf8String(mandateHash)
                ),
                Collections.<TypeReference<?>>emptyList()
        );
        return callNonViewFunction(debtorSafeAddress, signCreate);
    }

    @SimpleFunction(description="Revoke a mandate")
    public String mandateDebtorSignRevok(String mandateSafeAddress, String debtorSafeAddress, String urm) {

        Function signRevok = new Function (
                "mandateSignRevok",
                Arrays.<Type>asList(
                        new Address(mandateSafeAddress),
                        new Uint256(new BigInteger(urm))
                ),
                Collections.<TypeReference<?>>emptyList()
        );
        return callNonViewFunction(debtorSafeAddress, signRevok);
    }

    @SimpleFunction(description="Update terms of use related variables")
    public String mandateCreditorUpdateTou(String mandateSafeAddress, String touVersion, String touIssuanceDate, String touHash) {

        Function update = new Function (
                "updateTouVariables",
                Arrays.<Type>asList(
                        new Utf8String(touVersion),
                        new Utf8String(touIssuanceDate),
                        new Utf8String(touHash)
                ),
                Collections.<TypeReference<?>>emptyList()
        );
        return callNonViewFunction(mandateSafeAddress, update);
    }

    @SimpleFunction(description="Update api related variables")
    public String mandateCreditorUpdateApi(String mandateSafeAddress, String apiConfirmation, String apiRevocation, String apiGdpr, String apiTou) {

        Function update = new Function (
                "updateApiVariables",
                Arrays.<Type>asList(
                        new Utf8String(apiConfirmation),
                        new Utf8String(apiRevocation),
                        new Utf8String(apiGdpr),
                        new Utf8String(apiTou)
                ),
                Collections.<TypeReference<?>>emptyList()
        );
        return callNonViewFunction(mandateSafeAddress, update);
    }

    @SimpleFunction(description="Update creditor logo code")
    public String mandateCreditorUpdateLogoCode(String mandateSafeAddress, String logoCode) {

        Function update = new Function (
                "updateLogoCode",
                Collections.<Type>singletonList(new Utf8String(logoCode)),
                Collections.<TypeReference<?>>emptyList()
        );
        return callNonViewFunction(mandateSafeAddress, update);
    }


     /**
     * Emit a Certify event tag from a Qaxh Safe.
     *
     * @param UserSafeKey Address of the target Qaxh certified Safe.
     * @param data data to certify
     * @param etagStatus the status of the event
     * @return The transaction tx hash, the index of the ETAG  */

    @SimpleFunction(description="Emit a data certifying event tag from the target safe.")
    public String userEtagSign(String userSafeAddress, String data, String etagStatus) {

        String etagTxHash = null;
        String QaxhModule = getQaxhModule(userSafeAddress);

        Function etagSignFunction = new Function(
                "userEtagSign",
                Arrays.<Type>asList(
                        new Utf8String(data),
                        new Uint256(new BigInteger(etagStatus))
                ),
                Collections.<TypeReference<?>>emptyList()
        );
        try {
            etagTxHash = callNonViewFunction(QaxhModule, etagSignFunction);
            return etagTxHash;
        }
        catch (Exception e) {
            e.printStackTrace();
        }
        return etagTxHash;
    }

    @SimpleFunction(description="Retrieve tag from the target safe.")
    public List<String> userEtagDataGet(String userSafeAddress, String etagIndex) {
        String QaxhModule = getQaxhModule(userSafeAddress);
        List<String> userDataTag = new ArrayList<String>();
        try {
            Function getEtagStatus = new Function(
                    "getEtagStatus",
                    Collections.<Type>singletonList(new Uint(new BigInteger(etagIndex))),
                    Collections.<TypeReference<?>>singletonList(new TypeReference<Uint256>(){})
            );

            Function getEtagData = new Function(
                    "getEtagData",
                    Collections.<Type>singletonList(new Uint(new BigInteger(etagIndex))),
                    Collections.<TypeReference<?>>singletonList(new TypeReference<Utf8String>(){})
            );

            Function getEtagTimeStamp = new Function(
                    "getEtagTimeStamp",
                    Collections.<Type>singletonList(new Uint(new BigInteger(etagIndex))),
                    Collections.<TypeReference<?>>singletonList(new TypeReference<Uint256>(){})
            );

            List<Uint256> status  = callViewFunction(QaxhModule, getEtagStatus);
            List<Utf8String> etagData = callViewFunction(QaxhModule, getEtagData);
            List<Uint256> dateModif  = callViewFunction(QaxhModule, getEtagTimeStamp);

            userDataTag.add(etagData.get(0).getValue());
            userDataTag.add(status.get(0).getValue().toString());
            userDataTag.add(dateModif.get(0).getValue().toString());

            return userDataTag;
        }
        catch (Exception e) {
            e.printStackTrace();
        }
        return null;
    }

    @SimpleFunction(description="Retrieve the last tag index from the target safe.")
    public String userEtagLastIndexGet(String userSafeAddress){
        String QaxhModule = getQaxhModule(userSafeAddress);
        String lastIndex;

        try {
            Function getLastIndex = new Function(
                    "userEtagLastIndexGet",
                    Collections.<Type>emptyList(),
                    Collections.<TypeReference<?>>singletonList(new TypeReference<Uint256>(){})
            );
            List<Uint256> nbIndexes  = callViewFunction(QaxhModule, getLastIndex);

            lastIndex = nbIndexes.get(0).getValue().toString();

            return lastIndex;
        }
        catch(Exception e){
            e.printStackTrace();
        }
        return null;
    }

    @SimpleFunction(description="Modify the status of the tag from the target safe.")
    public String userEtagStatusModify(String userSafeAddress, String etagIndex, String newEtagStatus){
        String txHash =  null;
        String QaxhModule = getQaxhModule(userSafeAddress);

        Function modifyStatus = new Function(
                "userEtagStatusModify",
                Arrays.<Type>asList(
                        new Uint256(new BigInteger(etagIndex)),
                        new Uint256(new BigInteger(newEtagStatus))
                ),
                Collections.<TypeReference<?>>emptyList()
        );
        try {
            txHash = callNonViewFunction(QaxhModule, modifyStatus);

            return txHash;
        }
        catch (Exception e) {
            e.printStackTrace();
        }
        return txHash;
    }

     @SimpleFunction(description="Retrieve the history of the tag [[{\"Status Etag\": 11, \"TimeStamp\": 1615312928}, {\"Status Etag\": 19, \"TimeStamp\": 1615313559}]]  with a specific index")
    public List<String> userEtagTotalHistory(String userSafeAddress, String etagIndex){
        String txHash =  null;
        String QaxhModule = getQaxhModule(userSafeAddress);


        try {
            Function totalHistory = new Function(
            "userEtagTotalHistory",
            Collections.<Type>singletonList(new Uint(new BigInteger(etagIndex))),
            Arrays.<TypeReference<?>>asList(
            new TypeReference<DynamicArray<Uint256>>(){},
            new TypeReference<DynamicArray<Uint256>>(){})
        );
        List<DynamicArray<Uint256>> st = callViewFunction(QaxhModule, totalHistory);
        List<String> result = new ArrayList();
        List<String> states = new ArrayList();
        List<String> timestamp = new ArrayList();

        // list -> get(element)/Address -> Value[.., .. ,..] -> get 1 element / address -> Value : X -> ToString()
            // Equal to for(Uint256 tmp:...... }
            // states.add(st.get(1).getValue().get(0).getValue().toString())
            // states.add(st.get(1).getValue().get(1).getValue().toString())

        for (Uint256 tmp : st.get(1).getValue()){
            states.add(tmp.getValue().toString());
        }
        for (Uint256 tmp : st.get(0).getValue()){
            timestamp.add(tmp.getValue().toString());
        }
        for(int i=0;i<states.size();i++)
        {result.add("{\"Status Etag\": "+states.get(i)+", \"TimeStamp\": "+timestamp.get(i)+"}");}
        return (result);
           }

        catch (Exception e) {
            e.printStackTrace();
        }
        return null;
    }
    // Return
     @SimpleFunction(description="Retrieve the history of the tag [[{\"Status Etag\": 11, \"TimeStamp\": 1615312928}, {\"Status Etag\": 19, \"TimeStamp\": 1615313559}]] with a specific index after/equal a specific datetime")
    public List<String> userEtagTimeHistory(String userSafeAddress, String etagIndex, String datetime){
        String txHash =  null;
        String QaxhModule = getQaxhModule(userSafeAddress);


        try {
            Function partialHistory = new Function(
            "userEtagPartialTimeHistory",
             Arrays.<Type>asList(
                new Uint256(new BigInteger(etagIndex)),
                new Uint256(new BigInteger(datetime))),
            Arrays.<TypeReference<?>>asList(
            new TypeReference<DynamicArray<Uint256>>(){},
            new TypeReference<DynamicArray<Uint256>>(){})
        );
        List<DynamicArray<Uint256>> st = callViewFunction(QaxhModule, partialHistory);
        List<String> result = new ArrayList();
        List<String> states = new ArrayList();
        List<String> timestamp = new ArrayList();

        // list -> get(element)/Address -> Value[.., .. ,..] -> get 1 element / address -> Value : X -> ToString()
            // Equal to for(Uint256 tmp:...... }
            // states.add(st.get(1).getValue().get(0).getValue().toString())
            // states.add(st.get(1).getValue().get(1).getValue().toString())

        for (Uint256 tmp : st.get(1).getValue()){
            states.add(tmp.getValue().toString());
        }
        for (Uint256 tmp : st.get(0).getValue()){
            timestamp.add(tmp.getValue().toString());
        }
        for(int i=0;i<states.size();i++)
        {result.add("{\"Status Etag\": "+states.get(i)+", \"TimeStamp\": "+timestamp.get(i)+"}");}
        return (result);
           }
        catch (Exception e) {
            e.printStackTrace();
        }
        return null;
    }


    @SimpleFunction(description="Retrieve the etag index associated to the given TxHash")
    public String userEtagIndexGet(String etagTxHash) {
        Event event = new Event("EtagCreated",
                Arrays.<TypeReference<?>>asList(
                        new TypeReference<Utf8String>() {},
                        new TypeReference<Uint256>() {},
                        new TypeReference<Uint256>() {},
                        new TypeReference<Uint256>() {}
                ),
                Arrays.<TypeReference<?>>asList()
        );
        String encodedEvent = EventEncoder.encode(event);
        try {
            EthGetTransactionReceipt transactionReceipt = web3.ethGetTransactionReceipt(etagTxHash).sendAsync().get();
            List<Log> logs = transactionReceipt.getTransactionReceipt().getLogs();
            for(Log currentLog : logs ){
                if (
                        currentLog.getTopics().size() == 1 &&
                                currentLog.getTopics().get(0).equals(encodedEvent)
                ) {
                    List<Type> eventOutputs = FunctionReturnDecoder.decode(currentLog.getData(), event.getIndexedParameters());
                    Type returnedIndex = eventOutputs.get(2); //eventOutputs: [Data, Status, Index, Timestamp]
                    return (returnedIndex.getValue().toString());
                }
            }
        }
        catch (Exception e){
            e.printStackTrace();
        }
        return "-1";
    }

///////////////////////////////////////////////////////////////////////////////////////////
/*  OnboardingSafe EOA functions                                                             */
///////////////////////////////////////////////////////////////////////////////////////////

    @SimpleFunction(description="Update the OnboardingSafe index with data")
    public String onboardingIndexEoaUpdate(String onboardingAddress, String index, String data) {
	Function indexUpdate = new Function(
	    "indexUpdate",
	    Arrays.<Type>asList(
		new Uint256(new BigInteger(index)),
		new Utf8String(data)),
	    Collections.<TypeReference<?>>emptyList()
	);
        return callNonViewFunction(onboardingAddress, indexUpdate);
    }

    @SimpleFunction(description="Create new index in the OnboardingSafe")
    public String onboardingIndexEoaCreate(String onboardingAddress) {
	Function indexCreate = new Function(
	    "indexCreate",
	    Collections.<Type>emptyList(),
	    Collections.<TypeReference<?>>emptyList()
	);
        return callNonViewFunction(onboardingAddress, indexCreate);
    }

    @SimpleFunction(description="Get last index in the OnboardingSafe")
    public int onboardingIndexGetLast(String onboardingAddress) {
	Function indexGetLast = new Function(
	    "indexGetLast",
	    Collections.<Type>emptyList(),
	    Collections.<TypeReference<?>>singletonList(new TypeReference<Uint256>(){})
	);
	List<Uint256> st = callViewFunction(onboardingAddress, indexGetLast);
	return st.get(0).getValue().intValue();
    }

    @SimpleFunction(description="Get varList data at index in the OnboardingSafe")
    public String onboardingIndexGetData(String onboardingAddress, String index) {
	Function indexGetData = new Function(
	    "indexGetData",
	    Arrays.<Type>asList(new Uint256(new BigInteger(index))),
	    Collections.<TypeReference<?>>singletonList(new TypeReference<Utf8String>(){})
	    );
	List<Utf8String> st = callViewFunction(onboardingAddress, indexGetData);
	return st.get(0).toString();
    }

    @SimpleFunction(description="getVariables returns safe's parentAddress, customerId and safeVersion")
    public List<String> onboardingGetVariables(String onboardingAddress) {
        List<String> result = new ArrayList<String>();
        Function getVariables = new Function(
            "getVariables",
            Collections.<Type>emptyList(),
            Arrays.<TypeReference<?>>asList(
                new TypeReference<Address>(){},
                new TypeReference<Uint256>(){},
                new TypeReference<Utf8String>(){})
        );
        List<Type> st = callViewFunction(onboardingAddress, getVariables);
        result.add(st.get(0).getValue().toString());
        result.add(st.get(1).getValue().toString());
        result.add(st.get(2).getValue().toString());
        return(result);
    }

///////////////////////////////////////////////////////////////////////////////////////////
/*  OnboardingSafe UserSafe functions                                                             */
///////////////////////////////////////////////////////////////////////////////////////////

    @SimpleFunction(description="Update the OnboardingSafe index with data")
    public String onboardingIndexUserUpdate(String userSafe, String onboardingAddress, String index, String data) {
	Function indexUpdate = new Function(
	    "onboardingIndexUpdate",
	    Arrays.<Type>asList(
		new Address(onboardingAddress),
		new Uint256(new BigInteger(index)),
		new Utf8String(data)),
	    Collections.<TypeReference<?>>emptyList()
	);
        return callNonViewFunction(userSafe, indexUpdate);
    }

    @SimpleFunction(description="Create new index in the OnboardingSafe")
    public String onboardingIndexUserCreate(String userSafe, String onboardingAddress) {
	Function indexCreate = new Function(
	    "onboardingIndexCreate",
	    Arrays.<Type>asList(
		new Address(onboardingAddress)),
	    Collections.<TypeReference<?>>emptyList()
	);
        return callNonViewFunction(onboardingAddress, indexCreate);
    }

    @SimpleFunction(description="Write new enrolList element in the OBSafe")
    public String onboardingEnrolleeUserSignRud(String userSafe, String onboardingAddress) {
	Function enrolleeSignRud = new Function(
	    "onboardingEnrolleeSignRud",
	    Arrays.<Type>asList(
		new Address(onboardingAddress)),
	    Collections.<TypeReference<?>>emptyList()
	);
        return callNonViewFunction(userSafe, enrolleeSignRud);
    }

    @SimpleFunction(description="Create new doc for enrollee")
    public String onboardingEnrolleeUserDocSign(String userSafe, String onboardingAddress, String data) {
	Function newDoc = new Function(
	    "onboardingEnrolleeDocSign",
	    Arrays.<Type>asList(
		new Address(onboardingAddress),
		new Utf8String(data)),
	    Collections.<TypeReference<?>>emptyList()
	);
        return callNonViewFunction(userSafe, newDoc);
    }

    @SimpleFunction(description="Set enrollee status")
    public String onboardingEnrolleeUserStatusSign(String userSafe, String onboardingAddress, String rudFooter, String status) {
	Function enrolleeStatusSign = new Function(
	    "onboardingEnrolleeStatusSign",
	    Arrays.<Type>asList(
		new Address(onboardingAddress),
		new Address(userSafe),
		new Uint256(new BigInteger(rudFooter)),
		new Uint256(new BigInteger(status))),
	    Collections.<TypeReference<?>>emptyList()
	);
        return callNonViewFunction(userSafe, enrolleeStatusSign);
    }

    @SimpleFunction(description="Set enrollee status")
    public String onboardingRecruiterStatusUserSign(String userSafe, String onboardingAddress, String rudBody, String rudFooter, String status) {
	Function recruiterStatusSign = new Function(
	    "onboardingRecruiterStatusSign",
	    Arrays.<Type>asList(
		new Address(onboardingAddress),
		new Uint256(new BigInteger(rudBody)),
		new Uint256(new BigInteger(rudFooter)),
		new Uint256(new BigInteger(status))),
	    Collections.<TypeReference<?>>emptyList()
	);
        return callNonViewFunction(userSafe, recruiterStatusSign);
    }

///////////////////////////////////////////////////////////////////////////////////////////
/*  OnboardingSafe Enrollee functions                                                    */
///////////////////////////////////////////////////////////////////////////////////////////


    @SimpleFunction(description="Write new enrolList element in the OBSafe")
    public String onboardingEnrolleeEoaSignRud(String appKey, String onboardingAddress) {
	Function enrolleeSignRud = new Function(
	    "enrolleeSignRud",
	    Arrays.<Type>asList(
		new Address(appKey)),
	    Collections.<TypeReference<?>>emptyList()
	);
        return callNonViewFunction(onboardingAddress, enrolleeSignRud);
    }

    @SimpleFunction(description="Read enrollee's rudBody and rudFooter")
    public List<String> onboardingEnrolleeRead(String enrolleeAddress, String onboardingAddress) {
        List<String> result = new ArrayList<String>();
	Function enrolleeRead = new Function(
	    "enrolleeRead",
	    Arrays.<Type>asList(
		new Address(enrolleeAddress)),
	    Arrays.<TypeReference<?>>asList(
		new TypeReference<Uint256>(){},
		new TypeReference<Uint256>(){})
	);
	List<Uint256> st = callViewFunction(onboardingAddress, enrolleeRead);
	result.add(st.get(0).getValue().toString());
	result.add(st.get(1).getValue().toString());
	return(result);
    }

    @SimpleFunction(description="Create new doc for enrollee")
    public String onboardingEnrolleeEoaDocSign(String appKey, String onboardingAddress, String data) {
	Function newDoc = new Function(
	    "enrolleeDocSign",
	    Arrays.<Type>asList(
		new Address(appKey),
		new Utf8String(data)),
	    Collections.<TypeReference<?>>emptyList()
	);
        return callNonViewFunction(onboardingAddress, newDoc);
    }

    @SimpleFunction(description="Set enrollee status")
    public String onboardingEnrolleeEoaStatusSign(String appKey, String onboardingAddress, String rudFooter, String status) {
	Function enrolleeStatusSign = new Function(
	    "enrolleeStatusSign",
	    Arrays.<Type>asList(
		new Address(appKey),
		new Uint256(new BigInteger(rudFooter)),
		new Uint256(new BigInteger(status))),
	    Collections.<TypeReference<?>>emptyList()
	);
        return callNonViewFunction(onboardingAddress, enrolleeStatusSign);
    }

    @SimpleFunction(description="Read document")
    public List<String> onboardingDocRead(String onboardingAddress, String rudBody, String rudFooter) {
        List<String> result = new ArrayList<String>();
	Function docRead = new Function(
	    "docReadData",
	    Arrays.<Type>asList(
		new Uint256(new BigInteger(rudBody)),
		new Uint256(new BigInteger(rudFooter))),
	    Arrays.<TypeReference<?>>asList(
		new TypeReference<Address>(){},
		new TypeReference<Utf8String>(){})
	    );
	List<Type> st = callViewFunction(onboardingAddress, docRead);
	result.add(st.get(0).getValue().toString());
	result.add(st.get(1).toString());
	return (result);
    }

    @SimpleFunction(description="Return status list length for enrollee (1) or recruiter (2)")
    public String onboardingStatusGetLast(String onboardingAddress, String rudBody, String rudFooter, String type) {
	Function docStatusGetLast = new Function(
	    "docStatusGetLast",
	    Arrays.<Type>asList(
		new Uint256(new BigInteger(rudBody)),
		new Uint256(new BigInteger(rudFooter)),
		new Uint256(new BigInteger(type))),
	    Collections.<TypeReference<?>>singletonList(new TypeReference<Uint256>(){})
	    );
	List<Uint256> st = callViewFunction(onboardingAddress, docStatusGetLast);
	return st.get(0).getValue().toString();
    }

    @SimpleFunction(description="Return status and status at index for type enrollee (1) or recruiter (2)")
    public List<String> onboardingStatusGetData(String onboardingAddress, String rudBody, String rudFooter, String index, String type) {
	List<String> result = new ArrayList<String>();
	Function docStatusGetLast = new Function(
	    "docStatusGetData",
	    Arrays.<Type>asList(
		new Uint256(new BigInteger(rudBody)),
		new Uint256(new BigInteger(rudFooter)),
		new Uint256(new BigInteger(index)),
		new Uint256(new BigInteger(type))),
	    Arrays.<TypeReference<?>>asList(
		new TypeReference<Uint256>(){},
		new TypeReference<Uint256>(){})
	    );
	List<Uint256> st = callViewFunction(onboardingAddress, docStatusGetLast);
	result.add(st.get(0).getValue().toString());
	result.add(st.get(1).getValue().toString());
	return (result);
    }

    @SimpleFunction(description="Set enrollee status")
    public String onboardingRecruiterStatusEoaSign(String recruiterAddress, String onboardingAddress, String rudBody, String rudFooter, String status) {
	Function recruiterStatusSign = new Function(
	    "recruiterStatusSign",
	    Arrays.<Type>asList(
		new Address(recruiterAddress),
		new Uint256(new BigInteger(rudBody)),
		new Uint256(new BigInteger(rudFooter)),
		new Uint256(new BigInteger(status))),
	    Collections.<TypeReference<?>>emptyList()
	);
        return callNonViewFunction(onboardingAddress, recruiterStatusSign);
    }

    @SimpleFunction(description="enrolleeReadRudFooter")
    public List<String> onboardingEnrolleeReadRudFooter(String onboardingAddress, String rudBody) {
        List<String> result = new ArrayList<String>();
        Function enrolleeReadRudFooter = new Function(
            "enrolleeReadRudFooter",
            Collections.<Type>singletonList(new Uint256(new BigInteger(rudBody))),
            Arrays.<TypeReference<?>>asList(
                new TypeReference<Address>(){},
                new TypeReference<Uint256>(){})
        );
        List<Type> st = callViewFunction(onboardingAddress, enrolleeReadRudFooter);
        result.add(st.get(0).getValue().toString());
        result.add(st.get(1).getValue().toString());
        return(result);
    }

    @SimpleFunction(description="Returns last rudBody number")
    public String onboardingRudBodyGetLast(String onboardingAddress) {
        Function enrolleeRudBodyGetLast = new Function(
            "enrolleeRudBodyGetLast",
            Collections.<Type>emptyList(),
	    Collections.<TypeReference<?>>singletonList(new TypeReference<Uint256>(){})
        );
        List<Uint256> st = callViewFunction(onboardingAddress, enrolleeRudBodyGetLast);
        return(st.get(0).getValue().toString());
    }
///////////////////////////////////////////////////////////////////////////////////////////
          /*  outboxFolder EOA functions                                                             */
///////////////////////////////////////////////////////////////////////////////////////////

          @SimpleFunction(description=" Create new index in the outboxFolder")
          public String outboxIndexEoaCreate(String outboxFolderAddress) {
              Function indexCreate = new Function(
                  "indexCreate",
                  Collections.<Type>emptyList(),
                  Collections.<TypeReference<?>>emptyList()
              );
              return callNonViewFunction(outboxFolderAddress, indexCreate);
          }
          @SimpleFunction(description="Update the outboxFolder index with data")
          public String outboxIndexEoaUpdate(String outboxFolderAddress, String index, String data) {
              Function indexUpdate = new Function(
                  "indexUpdate",
                  Arrays.<Type>asList(
                      new Uint256(new BigInteger(index)),
                      new Utf8String(data)),
                  Collections.<TypeReference<?>>emptyList()
              );
              return callNonViewFunction(outboxFolderAddress, indexUpdate);
          }
          @SimpleFunction(description=" Get last index in the outboxFolder")
             public int outboxIndexGetLast(String outboxFolderAddress) {
                 Function indexGetLast = new Function(
                     "indexGetLast",
                     Collections.<Type>emptyList(),
                     Collections.<TypeReference<?>>singletonList(
                         new TypeReference<Uint256>(){})
                 );
                 List<Uint256> st = callViewFunction(outboxFolderAddress, indexGetLast);
                 return st.get(0).getValue().intValue();
             }

          @SimpleFunction(description="Get data at index in the outboxFolder")
          public String outboxIndexGetData(String outboxFolderAddress, String index) {
        Function indexGetData = new Function(
            "indexGetData",
            Arrays.<Type>asList(new Uint256(new BigInteger(index))),
            Collections.<TypeReference<?>>singletonList(new TypeReference<Utf8String>(){})
            );
        List<Utf8String> st = callViewFunction(outboxFolderAddress, indexGetData);
        return st.get(0).toString();
          }

                              @SimpleFunction(description="getVariables returns safe's parentAddress, customerId and smartContractVersion")
                              public List<String> outboxGetVariables(String outboxFolderAddress) {
                                  List<String> result = new ArrayList<String>();
                                  Function getVariables = new Function(
                                      "getVariables",
                                      Collections.<Type>emptyList(),
                                      Arrays.<TypeReference<?>>asList(
                                          new TypeReference<Address>(){},
                                          new TypeReference<Uint256>(){},
                                          new TypeReference<Utf8String>(){},
                                          new TypeReference<Uint256>(){},
                                          new TypeReference<Uint256>(){}
                                          )
                                  );
                                  List<Type> st = callViewFunction(outboxFolderAddress, getVariables);
                                  result.add(st.get(0).getValue().toString());
                                  result.add(st.get(1).getValue().toString());
                                  result.add(st.get(2).getValue().toString());
                                  result.add(st.get(3).getValue().toString());
                                  result.add(st.get(4).getValue().toString());
                                  return(result);
                              }

  ///////////////////////////////////////////////////////////////////////////////////////////
          /*  outboxFolder user functions                                                             */
  ///////////////////////////////////////////////////////////////////////////////////////////

          @SimpleFunction(description="Update the outboxFolder index with data")
          public String outboxIndexUserUpdate(String userSafe, String outboxFolderAddress, String index, String data) {
      	Function indexUpdate = new Function(
      	    "outboxIndexUpdate",
      	    Arrays.<Type>asList(
      		new Address(outboxFolderAddress),
      		new Uint256(new BigInteger(index)),
      		new Utf8String(data)),
      	    Collections.<TypeReference<?>>emptyList()
      	);
              return callNonViewFunction(userSafe, indexUpdate);
          }

          @SimpleFunction(description="Create new index in the outboxFolder")
          public String outboxIndexUserCreate(String userSafe, String outboxFolderAddress) {
      	Function indexCreate = new Function(
      	    "outboxIndexCreate",
      	    Arrays.<Type>asList(
      		new Address(outboxFolderAddress)),
      	    Collections.<TypeReference<?>>emptyList()
      	);
              return callNonViewFunction(outboxFolderAddress, indexCreate);
          }


//////////////////////////////////////////////////////////////////////////////////////////////////
//////////////////////////////////////////////////////////////////////////////////////////////////
/*

    @SimpleFunction(description="Accept a pending key in a corporate.")
    public String acceptKeyInChild(String corporateSafeKey, String childSafeKey, String UserSafeKey_accepted, String UserSafeKey_accepting) {
        String QaxhModule = getQaxhModule(UserSafeKey_accepting);
        Function function = new Function(
            "acceptChildKey",
            Arrays.<Type>asList(new Address(corporateSafeKey), new Address(childSafeKey), new Address(UserSafeKey_accepted)),
            Collections.<TypeReference<?>>emptyList()
        );
        return callNonViewFunction(QaxhModule, function);
    }

    @SimpleFunction(description="A user (administrator of the parent) confirms the creation of the child")
    public String signChildCreation(String parentSafeKey, String childSafeKey, String userSafeKey) {
        String QaxhModule = getQaxhModule(userSafeKey);
        Function function = new Function(
            "signChildCreation",
            Arrays.<Type>asList(new Address(parentSafeKey), new Address(childSafeKey)),
            Collections.<TypeReference<?>>emptyList()
        );
        return callNonViewFunction(QaxhModule, function);
    }

    @SimpleFunction(description="The user creates a request to become a signatory of the corporate safe.")
    public String addPendingKey(String corporateSafeKey, String userSafeKey, String rank, String trustLevel, String label) {
        String QaxhModule = getQaxhModule(userSafeKey);
        Function function = new Function(
            "addPendingKey",
            Arrays.<Type>asList(new Address(corporateSafeKey),
                                new Uint8(Integer.parseInt(rank)),
                                new Uint8(Integer.parseInt(trustLevel)),
                                new Utf8String(label)),
            Collections.<TypeReference<?>>emptyList()
        );
        return callNonViewFunction(QaxhModule, function);
    }
*/


///////////////////////////////////////////////////////////////////////////////////////////
    /*  Habilitation UserSafe functions                                                    */
///////////////////////////////////////////////////////////////////////////////////////////


    @SimpleFunction(description="USERSAFE: activation Issuer")
    public String habilitationIssuerActivationUserSign(String userSafeAddress, String HabilitationAddress, String newStatus){
        String txHash =  null;
        String QaxhModule = getQaxhModule(userSafeAddress);

        Function UserSign = new Function(
                "ActivationUserSignIssuer",
                Arrays.<Type>asList(
                        new Address(HabilitationAddress),
                        new Uint256(new BigInteger(newStatus))
                ),
                Collections.<TypeReference<?>>emptyList()
        );
        try {
            txHash = callNonViewFunction(QaxhModule, UserSign);

            return txHash;
        }
        catch (Exception e) {
            e.printStackTrace();
        }
        return txHash;
    }
    @SimpleFunction(description="USERSAFE: activation Acquirer")
    public String habilitationAcquirerActivationUserSign(String userSafeAddress, String HabilitationAddress, String newStatus){
        String txHash =  null;
        String QaxhModule = getQaxhModule(userSafeAddress);

        Function UserSign = new Function(
                "ActivationUserSignAcquirer",
                Arrays.<Type>asList(
                        new Address(HabilitationAddress),
                        new Uint256(new BigInteger(newStatus))
                ),
                Collections.<TypeReference<?>>emptyList()
        );
        try {
            txHash = callNonViewFunction(QaxhModule, UserSign);

            return txHash;
        }
        catch (Exception e) {
            e.printStackTrace();
        }
        return txHash;
    }


    @SimpleFunction(description="USERSAFE: create data of Index List")
    public String habilitationIndexUserCreate (String userSafeAddress, String HabilitationAddress) {
        String QaxhModule = getQaxhModule(userSafeAddress);
        String txHash =  null;

        try {
            Function IndexUserCreate = new Function(
                    "IndexUserCreate",
                    Arrays.<Type>asList(
                            new Address(HabilitationAddress)

                    )
                    ,
                    Collections.<TypeReference<?>>emptyList()
            );


            try {
                txHash = callNonViewFunction(QaxhModule, IndexUserCreate);

                return txHash;
            } catch (Exception e) {
                e.printStackTrace();
            }
            return txHash;
        } catch (Exception e) {
            e.printStackTrace();
            return null;
        }

    }


       @SimpleFunction(description="USERSAFE: update data of Index List")
    public String habilitationIndexUserUpdate (String userSafeAddress, String HabilitationAddress,String index, String data) {
        String QaxhModule = getQaxhModule(userSafeAddress);
        String txHash =  null;

        try {
            Function IndexUpdateCreate = new Function(
                    "IndexUserUpdate",
                    Arrays.<Type>asList(
                            new Address(HabilitationAddress),
                            new Uint256(new BigInteger(index)),
                            new Utf8String(data)



                    )
                    ,
                    Collections.<TypeReference<?>>emptyList()
            );


            try {
                txHash = callNonViewFunction(QaxhModule, IndexUpdateCreate);

                return txHash;
            } catch (Exception e) {
                e.printStackTrace();
            }
            return txHash;
        } catch (Exception e) {
            e.printStackTrace();
            return null;
        }

    }
   @SimpleFunction(description="USERSAFE : Make Address enabled to create")
   public String habilitationIssuerAddressUserCreate (String userSafeAddress, String HabilitationAddress,String Habilitated, String KeyInd, String Iban) {
       String QaxhModule = getQaxhModule(userSafeAddress);
       String txHash =  null;

       try {
           Function IndexUpdateCreate = new Function(
                   "IssuerUserCreate",
                   Arrays.<Type>asList(
                           new Address(HabilitationAddress),
                           new Address(Habilitated),
                           new Uint256(new BigInteger(KeyInd)),
                           JavaStringToHexString32B(Iban)



                   )
                   ,
                   Collections.<TypeReference<?>>emptyList()
           );


           try {
               txHash = callNonViewFunction(QaxhModule, IndexUpdateCreate);

               return txHash;
           } catch (Exception e) {
               e.printStackTrace();
           }
           return txHash;
       } catch (Exception e) {
           e.printStackTrace();
           return null;
       }

   }

    @SimpleFunction(description="USERSAFE :Delete Address registered ")
    public String habilitationIssuerAddressUserDelete ( String userSafeAddress, String HabilitationAddress,String Habilitated) {
        String QaxhModule = getQaxhModule(userSafeAddress);
        String txHash =  null;

        try {
            Function IndexUpdateCreate = new Function(
                    "IssuerUserDelete",
                    Arrays.<Type>asList(
                            new Address(HabilitationAddress),
                            new Address(Habilitated)



                    )
                    ,
                    Collections.<TypeReference<?>>emptyList()
            );


            try {
                txHash = callNonViewFunction(QaxhModule, IndexUpdateCreate);

                return txHash;
            } catch (Exception e) {
                e.printStackTrace();
            }
            return txHash;
        } catch (Exception e) {
            e.printStackTrace();
            return null;
        }

    }
    @SimpleFunction(description="USERSAFE : Make Address Eao enabled to sign")
    public String habilitationIssuerAddressUserSign (String userSafeAddress, String HabilitationAddress,String Habilitated,String KeyInd, List<String> categories , List<String> amounts, String Iban) {
        String QaxhModule = getQaxhModule(userSafeAddress);
        String txHash =  null;


        int i ;
        int SizeListAmount = amounts.size() /* - 1 */ ; // Size with App inventor -> SizeListAmount - 1 ( so if you test you must add - 1 here !!!)
        int SizeListCategories = categories.size() /* - 1 */; // Size with App Inventor -> SizeListCategories - 1 ( so if you test you must add - 1 here!!! )
        //  Java with App inventor : First Element is in List[1] and last element is in List[List.size()]



        ArrayList<Uint256> ListAmount = new ArrayList<>();
        for(i = 1 ; i <= SizeListAmount ;i++)
        {
            ListAmount.add(new Uint256(new BigInteger(amounts.get(i))));
            // System.out.println(amounts.get(i).toString());
        }
        ArrayList<Bytes32> ListCategories = new ArrayList<Bytes32>();
        for(i = 1 ; i <= SizeListCategories ;i++)
        {
            ListCategories.add(JavaStringToHexString32B(categories.get(i)));
            //System.out.println(categories.get(i));
        }
        /*for (String s : amounts) {
            ListAmount.add(new Uint256(new BigInteger(s)));
        }

       for (String s : categories) {
            //System.out.println(s.getBytes(StandardCharsets.UTF_8).length);

            ListCategories.add(JavaStringToHexString32B(s));

        }*/
        DynamicArray<Bytes32> listCat = new DynamicArray<Bytes32>(ListCategories);


        DynamicArray<Uint256> listAmount = new DynamicArray<Uint256>(ListAmount);

        try {
            Function IndexUpdateCreate = new Function(
                    "IssuerUserSign",
                    Arrays.<Type>asList(
                            new Address(HabilitationAddress),
                            new Address(Habilitated),
                            new Uint256(new BigInteger(KeyInd)),
                            listCat,
                            listAmount
                            , JavaStringToHexString32B(Iban))
                    ,
                    Collections.<TypeReference<?>>emptyList()
            );


            try {
                txHash = callNonViewFunction(QaxhModule, IndexUpdateCreate);

                return txHash;
            } catch (Exception e) {
                e.printStackTrace();
            }
            return txHash;
        } catch (Exception e) {
            e.printStackTrace();
            return null;
        }

    }
 @SimpleFunction(description="USERSAFE : Update amount of a Category")
public String habilitationIssuerAddressUserUpdateCategory (String userSafeAddress, String HabilitationAddress,String Habilitated, String category , String amount) {
        String QaxhModule = getQaxhModule(userSafeAddress);
        String txHash =  null;




        try {
            Function IndexUpdateCreate = new Function(
                    "IssuerUserUpdateCategory",
                    Arrays.<Type>asList(
                            new Address(HabilitationAddress),
                            new Address(Habilitated),
                            new Utf8String(category),
                            new Uint256(new BigInteger(amount))
                            )
                    ,
                    Collections.<TypeReference<?>>emptyList()
            );


            try {
                txHash = callNonViewFunction(QaxhModule, IndexUpdateCreate);

                return txHash;
            } catch (Exception e) {
                e.printStackTrace();
            }
            return txHash;
        } catch (Exception e) {
            e.printStackTrace();
            return null;
        }

    }













///////////////////////////////////////////////////////////////////////////////////////////
    /*  Habilitation EOA functions                                                    */
///////////////////////////////////////////////////////////////////////////////////////////
   @SimpleFunction(description="EOA: activation Issuer")
    public String habilitationIssuerActivationEoaSign(String HabilitationAddress, String newStatus){
        String txHash =  null;


        Function UserSign = new Function(
                "ActivationSignIssuer",
                Arrays.<Type>asList(
                        new Uint256(new BigInteger(newStatus))
                ),
                Collections.<TypeReference<?>>emptyList()
        );
        try {
            txHash = callNonViewFunction(HabilitationAddress, UserSign);

            return txHash;
        }
        catch (Exception e) {
            e.printStackTrace();
        }
        return txHash;
    }
     @SimpleFunction(description="EOA: activation Acquirer")
    public String habilitationAcquirerActivationEoaSign(String HabilitationAddress, String newStatus){
        String txHash =  null;


        Function UserSign = new Function(
                "ActivationSignAcquirer",
                Arrays.<Type>asList(
                        new Uint256(new BigInteger(newStatus))
                ),
                Collections.<TypeReference<?>>emptyList()
        );
        try {
            txHash = callNonViewFunction(HabilitationAddress, UserSign);

            return txHash;
        }
        catch (Exception e) {
            e.printStackTrace();
        }
        return txHash;
    }


    @SimpleFunction(description="EOA: create data of Index List")
    public String habilitationIndexEoaCreate (String HabilitationAddress) {
        String lastIndex;
        String txHash =  null;

        try {
            Function IndCreate = new Function(
                    "indexCreate",
                    Collections.<Type>emptyList(),
                    Collections.<TypeReference<?>>emptyList()
            );


            try {
                txHash = callNonViewFunction(HabilitationAddress, IndCreate);
               // System.out.println("Create");
                return txHash;
            } catch (Exception e) {
                e.printStackTrace();
            }
            return txHash;
        } catch (Exception e) {
            e.printStackTrace();
            return null;
        }

    }

    @SimpleFunction(description="EOA: update data of Index List")
    public String habilitationIndexEoaUpdate ( String HabilitationAddress,String index, String data) {
        String txHash =  null;

        try {
            Function IndexUpdateCreate = new Function(
                    "indexUpdate",
                    Arrays.<Type>asList(
                            new Uint256(new BigInteger(index)),
                            new Utf8String(data)



                    )
                    ,
                    Collections.<TypeReference<?>>emptyList()
            );


            try {
                txHash = callNonViewFunction(HabilitationAddress, IndexUpdateCreate);

                return txHash;
            } catch (Exception e) {
                e.printStackTrace();
            }
            return txHash;
        } catch (Exception e) {
            e.printStackTrace();
            return null;
        }

    }
   @SimpleFunction(description="EOA : Make Address Eao enabled to create")
   public String habilitationIssuerAddressEoaCreate ( String HabilitationAddress,String Habilitated, String Iban) {
       String txHash =  null;

       try {
           Function IndexUpdateCreate = new Function(
                   "IssuerEoaCreate",
                   Arrays.<Type>asList(
                           new Address(Habilitated)
                           , JavaStringToHexString32B(Iban)



                   )
                   ,
                   Collections.<TypeReference<?>>emptyList()
           );


           try {
               txHash = callNonViewFunction(HabilitationAddress, IndexUpdateCreate);

               return txHash;
           } catch (Exception e) {
               e.printStackTrace();
           }
           return txHash;
       } catch (Exception e) {
           e.printStackTrace();
           return null;
       }

   }

    @SimpleFunction(description="EOA :Delete Address registered ")
    public String habilitationIssuerAddressEoaDelete ( String HabilitationAddress,String Habilitated) {
        String txHash =  null;

        try {
            Function IndexUpdateCreate = new Function(
                    "IssuerDelete",
                    Arrays.<Type>asList(
                            new Address(Habilitated)



                    )
                    ,
                    Collections.<TypeReference<?>>emptyList()
            );


            try {
                txHash = callNonViewFunction(HabilitationAddress, IndexUpdateCreate);

                return txHash;
            } catch (Exception e) {
                e.printStackTrace();
            }
            return txHash;
        } catch (Exception e) {
            e.printStackTrace();
            return null;
        }

    }
      @SimpleFunction(description="EOA : Make Address enabled to Sign")
      public String habilitationIssuerAddressEoaSign ( String HabilitationAddress,String Habilitated,List<String> categories , List<String> amounts, String Iban) {
          String txHash =  null;
          int i ;
          int SizeListAmount = amounts.size() /* - 1 */ ; // Size with App inventor -> SizeListAmount - 1 ( so if you test you must add - 1 here !!!)
          int SizeListCategories = categories.size() /*  - 1*/; // Size with App Inventor -> SizeListCategories - 1 ( so if you test you must add - 1 here!!! )
          //  Java with App inventor : First Element is in List[1] and last element is in List[List.size()]



          ArrayList<Uint256> ListAmount = new ArrayList<>();
          for(i = 1 ; i <= SizeListAmount ;i++)
          {
              ListAmount.add(new Uint256(new BigInteger(amounts.get(i))));
              // System.out.println(amounts.get(i).toString());
          }
          ArrayList<Bytes32> ListCategories = new ArrayList<Bytes32>();
          for(i = 1 ; i <= SizeListCategories ;i++)
          {
              ListCategories.add(JavaStringToHexString32B(categories.get(i)));
              //System.out.println(categories.get(i));
          }
        /*for (String s : amounts) {
            ListAmount.add(new Uint256(new BigInteger(s)));
        }

       for (String s : categories) {
            //System.out.println(s.getBytes(StandardCharsets.UTF_8).length);

            ListCategories.add(JavaStringToHexString32B(s));

        }*/
          DynamicArray<Bytes32> listCat = new DynamicArray<Bytes32>(ListCategories);


          DynamicArray<Uint256> listAmount = new DynamicArray<Uint256>(ListAmount);


          try {
              Function IndexUpdateCreate = new Function(
                      "IssuerEoaSign",
                      Arrays.<Type>asList(
                              new Address(Habilitated),
                              listCat,
                              listAmount,
                              JavaStringToHexString32B(Iban))
                      ,
                      Collections.<TypeReference<?>>emptyList()
              );


              try {
                  txHash = callNonViewFunction(HabilitationAddress, IndexUpdateCreate);

                  return txHash;
              } catch (Exception e) {
                  e.printStackTrace();
              }
              return txHash;
          } catch (Exception e) {
              e.printStackTrace();
              return null;
          }
      }

  @SimpleFunction(description="EOA : update amount of a cateogry")
 public String habilitationIssuerAddressEoaUpdateCategory (String HabilitationAddress,String Habilitated, String category , String amount) {

        String txHash =  null;

        try {
            Function IndexUpdateCreate = new Function(
                    "IssuerUpdateCategory",
                    Arrays.<Type>asList(
                            new Address(Habilitated),
                            new Utf8String(category),
                            new Uint256(new BigInteger(amount))
                    )
                    ,
                    Collections.<TypeReference<?>>emptyList()
            );


            try {
                txHash = callNonViewFunction(HabilitationAddress, IndexUpdateCreate);

                return txHash;
            } catch (Exception e) {
                e.printStackTrace();
            }
            return txHash;
        } catch (Exception e) {
            e.printStackTrace();
            return null;
        }

    }





    ///////////////////////////////////////////////////////////////////////////////////////////
    /*  Habilitation Getter functions                                                    */
///////////////////////////////////////////////////////////////////////////////////////////
   @SimpleFunction(description="Get data of Index List")
            public String habilitationIndexGetData(String habilitationAddress, String index){
            Function indexGetData = new Function(
            "indexGetData",
            Arrays.<Type>asList(new Uint256(new BigInteger(index))),
            Collections.<TypeReference<?>>singletonList(new TypeReference<Utf8String>(){})
    );
            List<Utf8String> st = callViewFunction(habilitationAddress, indexGetData);
            if(st == null)
              { return "Error Index" ;}
                return st.get(0).toString();
            }





        @SimpleFunction(description="Get Variables of Habilitation")
            public List<String> habilitationGetVariables(String HabilitationAddress) {
        List<String> result = new ArrayList<String>();

        Function getVariables = new Function(
                "getVariables",
                Collections.<Type>emptyList(),
                Arrays.<TypeReference<?>>asList(new TypeReference<Address>(){},
                        new TypeReference<Address>(){},
                        new TypeReference<Uint256>(){}
                        ,new TypeReference<Uint256>(){},
                        new TypeReference<Uint256>(){},
                        new TypeReference<Utf8String>(){},
                        new TypeReference<Utf8String>(){},
                        new TypeReference<Utf8String>(){},
                        new TypeReference<Uint256>(){},
                        new TypeReference<Uint256>(){},
                        new TypeReference<Address>() {}
                )
        );
        List<Type> st = callViewFunction(HabilitationAddress, getVariables);
        result.add(st.get(0).toString());
        result.add(st.get(1).toString());
        result.add(st.get(2).getValue().toString());
        result.add(st.get(3).getValue().toString());
        result.add(st.get(4).getValue().toString());
        result.add(st.get(5).toString());
        result.add(st.get(6).toString());
        result.add(st.get(7).toString());
        result.add(st.get(8).getValue().toString());
        result.add(st.get(9).getValue().toString());
        result.add(st.get(10).toString());


        return(result);
    }


   @SimpleFunction(description="Retrieve the last index from the Index List.")
    public String habilitationIndexGetLast(String HabilitationAddress){
        String lastIndex = null;

        try {
            Function getLastIndex = new Function(
                    "indexGetLast",
                    Collections.<Type>emptyList(),
                    Collections.<TypeReference<?>>singletonList(new TypeReference<Uint256>(){})
            );
            List<Uint256> nbIndexes  = callViewFunction(HabilitationAddress, getLastIndex);

            lastIndex = nbIndexes.get(0).getValue().toString();

            return lastIndex;
        }
        catch(Exception e){
            e.printStackTrace();
        }
        return null;
    }

   @SimpleFunction(description="Get List of Issuer Habilitated.")
    public List<String> habilitationIssuerGetList(String HabilitationAddress){
        List<String> result = new ArrayList<String>();


        try {
            Function getIssuerList = new Function(
                    "IssuerGetList",
                    Collections.<Type>emptyList(),
                    Collections.<TypeReference<?>>singletonList(new TypeReference<DynamicArray<Address>>(){})
            );
            List<DynamicArray<Address>> st  = callViewFunction(HabilitationAddress,getIssuerList);
           // System.out.println(st);
            //System.out.println(st.get(0));
            //System.out.println(st.get(0).getValue().get(0));
            for (Address tmp : st.get(0).getValue()){
                result.add(tmp.getValue().toString());
            }



            return result;
        }
        catch(Exception e){
            e.printStackTrace();
        }
        return null;
    }

    @SimpleFunction(description="Get data of Issuer Habilitated.")
    public List<String> habilitationIssuerGetData(String habilitationAddress, String Habilitated){
        List<String> result = new ArrayList<String>();
        int i = 0 ;
        try {
            Function indexGetData = new Function(
                    "IssuerGetData",
                    Arrays.<Type>asList(new Address(Habilitated)),
                    Arrays.<TypeReference<?>>asList(new TypeReference<Uint256>() {
                                                    },
                            new TypeReference<Bool>() {
                            },
                            new TypeReference<Bool>() {
                            },
                            new TypeReference<Utf8String>() {
                            }
                            , new TypeReference<DynamicArray<Bytes32>>() {
                            },
                            new TypeReference<DynamicArray<Uint256>>() {
                            }

                    )
            );

            List<Type> st = callViewFunction(habilitationAddress, indexGetData);
            List<String> amount = new ArrayList<String>();
            List<String> Cat = new ArrayList<String>();
            String Category = "";
            String CategoryAmount = "";
            result.add(st.get(0).getValue().toString());
            result.add(st.get(1).getValue().toString());
            result.add(st.get(2).getValue().toString());
            result.add(st.get(3).getValue().toString());
            //  System.out.println();
            if (st.get(2).getValue().toString().compareTo("true") == 0) {
                for (Uint256 tmp : ((DynamicArray<Uint256>) st.get(5)).getValue()) {
                    amount.add(tmp.getValue().toString());
                    CategoryAmount += tmp.getValue().toString() + ";";
                }



                for (Bytes32 s : ((DynamicArray<Bytes32>) st.get(4)).getValue()) {
                    //System.out.println(HexString32BToJavaString(s));
                    Cat.add(HexString32BToJavaString(s));
                    Category += HexString32BToJavaString(s) + ";";
                }



                String newCategory = Category.substring(0,Category.length()-1);
                String newCategoryAmount = CategoryAmount.substring(0, CategoryAmount.length() - 1) ;

                result.add(newCategory);
                result.add(newCategoryAmount);}



            return result;



        }
        catch(Exception e){
            e.printStackTrace();

        }
        return Collections.singletonList("Address not Habilitated");
    }

    @SimpleFunction(description="Retrieve the last index from the Order List")
  public String habilitationOrderGetLast(String HabilitationAddress){
        String lastIndex = null;

        try {
            Function getLastIndex = new Function(
                    "OrderGetLast",
                    Collections.<Type>emptyList(),
                    Collections.<TypeReference<?>>singletonList(new TypeReference<Uint256>(){})
            );
            List<Uint256> nbIndexes  = callViewFunction(HabilitationAddress, getLastIndex);

            lastIndex = nbIndexes.get(0).getValue().toString();

            return lastIndex;
        }
        catch(Exception e){
            e.printStackTrace();
        }
        return null;
    }

    @SimpleFunction(description="Retrieve the Data ( Address, Data Encrypted ) from Order")
    public List<String> habilitationOrderGetData(String habilitationAddress, String index){
        List<String> result = new ArrayList<String>();
        int i = 0 ;
        int j = 0 ;
        int FirstElement = 0;

        try {
            Function indexGetData = new Function(
                    "OrderGetData",
                    Arrays.<Type>asList(new Uint256(new BigInteger(index))),
                    Arrays.<TypeReference<?>>asList(
                            new TypeReference<DynamicArray<Address>>() {
                            },
                            new TypeReference<DynamicArray<Bytes32>>() {
                            },
                            new TypeReference<DynamicArray<Uint256>>() {
                            }

                    )


            );

            List<String> addr = new ArrayList<String>();
            List<String> AllHead = new ArrayList<String>();
            List<String> Head = new ArrayList<String>();
            List<Integer> Dim = new ArrayList<>();
            Dim.add(0);
            String H = "";


            List<Type> st = callViewFunction(habilitationAddress, indexGetData);
            if(((DynamicArray<Address>) st.get(0)).getValue().size() > 0 )
            {for (Bytes32 s : ((DynamicArray<Bytes32>) st.get(1)).getValue()) {
                //System.out.println(HexString32BToJavaString(s));
                AllHead.add(HexString32BToJavaString(s));

                //Data += "\"" + Numeric.toHexString(s.getValue()) + "\", "; for print 0x
            }
            for (Uint256 s : ((DynamicArray<Uint256>) st.get(2)).getValue()){
                    Dim.add(s.getValue().intValue());
                }
            for (Address s : ((DynamicArray<Address>) st.get(0)).getValue()) {
                addr.add(s.getValue());
                //System.out.println(HexString32BToJavaString(s));

              //  DataAddr += "\"" + s.getValue() + "\", ";
            }

            for ( i = 0 ; i < addr.size();i++)
            {

                FirstElement = Dim.get(i);
                for ( j = FirstElement ; j < Dim.get(i + 1); j++ )
                {
                    H += AllHead.get(j);

                }
                Head.add(H);
                H = "";
            }
            for( i  = 0; i < addr.size(); i++)
            {
                result.add(addr.get(i)+";"+Head.get(i));

            }



        }else
            {
                result.add("none");


            }





            return result;



        }
        catch(Exception e){
            e.printStackTrace();
        }
        return null;
    }

    @SimpleFunction(description="Retrieve the Issuer Status")
   public List<String> habilitationOrderGetHabilitated(String habilitationAddress, String index){
        List<String> result = new ArrayList<String>();
        int i = 0 ;
        try {
            Function indexGetData = new Function(
                    "OrderGetHabilitated",
                    Arrays.<Type>asList(new Uint256(new BigInteger(index))),
                    Arrays.<TypeReference<?>>asList(
                            new TypeReference<DynamicArray<Uint256>>() {
                            }
                            , new TypeReference<DynamicArray<Uint256>>() {
                            },
                            new TypeReference<DynamicArray<Address>>() {
                            }

                    )
            );

            List<Type> st = callViewFunction(habilitationAddress, indexGetData);

            List<String> addr = new ArrayList<String>();
            List<String> time = new ArrayList<String>();
            List<String> status = new ArrayList<String>();

            if(((DynamicArray<Uint256>) st.get(0)).getValue().size() > 0 ) {
                for (Uint256 s : ((DynamicArray<Uint256>) st.get(0)).getValue()) {
                    status.add(s.getValue().toString());
                    //System.out.println(HexString32BToJavaString(s));

                   // Data += "\"" + s.getValue().toString() + "\", ";
                }
                for (Uint256 s : ((DynamicArray<Uint256>) st.get(1)).getValue()) {
                    time.add(s.getValue().toString());
                    //System.out.println(HexString32BToJavaString(s));

                   // Data2 += "\"" + s.getValue().toString() + "\", ";
                }

                for (Address s : ((DynamicArray<Address>) st.get(2)).getValue()) {
                    addr.add(s.getValue().toString());
                    //System.out.println(HexString32BToJavaString(s));

                   // DataAddr += "\"" + s.getValue().toString() + "\", ";
                }
                for( i  = 0; i < status.size(); i++)
                {
                    result.add(status.get(i)+";"+time.get(i)+";"+addr.get(i));

                }

            }
            else
            {
                result.add("none");


            }






            return result;



        }
        catch(Exception e){
            e.printStackTrace();
        }
        return null;
    }

    @SimpleFunction(description="Retrieve the acquirer status")
     public List<String> habilitationOrderGetAcquirer (String habilitationAddress, String index){
        List<String> result = new ArrayList<String>();
        int i = 0 ;
        try {
            Function indexGetData = new Function(
                    "OrderGetAcquirer",
                    Arrays.<Type>asList(new Uint256(new BigInteger(index))),
                    Arrays.<TypeReference<?>>asList(
                            new TypeReference<DynamicArray<Uint256>>() {
                            }
                            , new TypeReference<DynamicArray<Uint256>>() {
                            }

                    )
            );

            List<Type> st = callViewFunction(habilitationAddress, indexGetData);
            List<String> time = new ArrayList<String>();
            List<String> status = new ArrayList<String>();
            if(((DynamicArray<Uint256>) st.get(0)).getValue().size() > 0 ) {
                for (Uint256 s : ((DynamicArray<Uint256>) st.get(0)).getValue()) {
                    status.add(s.getValue().toString());
                    //System.out.println(HexString32BToJavaString(s));

                   // Data += "\"" + s.getValue().toString() + "\", ";
                }
                for (Uint256 s : ((DynamicArray<Uint256>) st.get(1)).getValue()) {
                    time.add(s.getValue().toString());
                    //System.out.println(HexString32BToJavaString(s));

                   // Data2 += "\"" + s.getValue().toString() + "\", ";
                }

                for( i  = 0; i < status.size(); i++)
                {
                    result.add(status.get(i)+";"+time.get(i));

                }




            }
            else
            {
                result.add("none");



            }

            return result;



        }
        catch(Exception e){
            e.printStackTrace();
        }
        return null;
    }

  @SimpleFunction(description="Retrieve the Merkle Header")
  public String habilitationOrderGetMerkleHeader(String HabilitationAddress,String index){
        String lastIndex = null;

       try {
            Function getLastIndex = new Function(
                    "OrderGetMerkleHeader",
                    Arrays.<Type>asList(new Uint256(new BigInteger(index))),
                    Collections.<TypeReference<?>>singletonList(new TypeReference<Bytes32>(){})
            );
            List<Bytes32> nbIndexes  = callViewFunction(HabilitationAddress, getLastIndex);

            lastIndex = Numeric.toHexString(nbIndexes.get(0).getValue());

            return lastIndex;
        }
        catch(Exception e){
            e.printStackTrace();
        }
        return null;
    }

    ///////////////////////////////////////////////////////////////////////////////////////////
    /*  Order EOA functions                                                    */
///////////////////////////////////////////////////////////////////////////////////////////
    @SimpleFunction(description="Create an Order")
    public String habilitationOrderEoaCreate( String HabilitationAddress,String headerMerkle,
                                              List<String> Habilitated,List<String> encrypted, String Parent, String ParentData) {
        String txHash =  null;
        int i ;
        int j ,h;
        int lastElement = 0;
        int SizeListHab = Habilitated.size() /*-1*/ ; // Size with App inventor -> SizeListAmount - 1 ( so if you test you must add - 1 here !!!)
        int SizeListEnc = encrypted.size() /*-1 */; // Size with App Inventor -> SizeListCategories - 1 ( so if you test you must add - 1 here!!! )
        //  Java with App inventor : First Element is in List[1] and last element is in List[List.size()]
        ArrayList<Address> ListAddr = new ArrayList<Address>();
        for(i = 1 ; i <= SizeListHab ;i++)
        {   //MyStr2+="\n"+Habilitated.get(i);
            ListAddr.add(new Address(Habilitated.get(i)));
            // System.out.println(amounts.get(i).toString());
        }

        ListAddr.add(new Address(Parent));
        ArrayList<Bytes32> ListEnc = new ArrayList<Bytes32>();
        ArrayList<Uint256> ListData = new ArrayList<>();
        ArrayList<String> ListSub= new ArrayList<>();

        String arr = "";
        int num;
        int firstnum,secondnum;

        for(i = 1 ; i <= SizeListEnc ;i++)
        {


            num = (int) Math.floor((encrypted.get(i).length() / 32));
            System.out.println(num);
            for(j=0;j< num  ;j++)
            {   firstnum = j*32;
                secondnum = (j+1)*32;
                ListSub.add(encrypted.get(i).substring(firstnum,secondnum));
            }
            ListSub.add(encrypted.get(i).substring(j*32));



            for(h=0 ; h<ListSub.size();h++)
            {
                System.out.println(ListSub.get(h));
                ListEnc.add(JavaStringToHexString32B(ListSub.get(h)));
                //
            }
            lastElement+=ListSub.size();
            ListData.add(new Uint256(lastElement));

            ListSub.clear();
        }


        ListSub.clear();
        num = (int) Math.floor((ParentData.length() / 32));
        System.out.println(num);
        for(j=0;j< num  ;j++)
        {   firstnum = j*32;
            secondnum = (j+1)*32;
            ListSub.add(ParentData.substring(firstnum,secondnum));
        }
        ListSub.add(ParentData.substring(j*32));

        for(h=0 ; h<ListSub.size();h++)
        {
            System.out.println(ListSub.get(h));
            ListEnc.add(JavaStringToHexString32B(ListSub.get(h)));

        }
        lastElement+=ListSub.size();
        ListData.add(new Uint256(lastElement));

        System.out.println("--------------------");
        for(i = 0 ; i < ListEnc.size(); i++)
        {
            System.out.println(Numeric.toHexString(ListEnc.get(i).getValue()));
        }

        System.out.println(ListAddr);
        for(i=0 ; i < ListData.size();i++)
            System.out.println(ListData.get(i).getValue().toString());




        DynamicArray<Bytes32> listEnc = new DynamicArray<Bytes32>(ListEnc);
        DynamicArray<Address> listAddr= new DynamicArray<Address>(ListAddr);
        DynamicArray<Uint256> listData = new DynamicArray<Uint256>(ListData);




        try {
            Function IndexUpdateCreate = new Function(
                    "OrderCreate",
                    Arrays.<Type>asList(
                            new Bytes32(Numeric.hexStringToByteArray(headerMerkle)),
                            listAddr,
                            listEnc,
                            listData




                    )
                    ,
                    Collections.<TypeReference<?>>emptyList()
            );


            try {
                txHash = callNonViewFunction(HabilitationAddress, IndexUpdateCreate);

                return txHash;
            } catch (Exception e) {
                e.printStackTrace();
            }
            return txHash;
        } catch (Exception e) {
            e.printStackTrace();
            return null;
        }

    }




    @SimpleFunction(description="Add data to Order")
    public String habilitationOrderEoaAdd( String HabilitationAddress,String index,
                                           String Addr, String Data) {
        String txHash =  null;
        int j ,num,firstnum,secondnum,h;
        ArrayList<Bytes32> ListEnc = new ArrayList<Bytes32>();
        ArrayList<String> ListSub= new ArrayList<>();
        num = (int) Math.floor((Data.length() / 32));
        System.out.println(num);
        for(j=0;j< num  ;j++)
        {   firstnum = j*32;
            secondnum = (j+1)*32;
            ListSub.add(Data.substring(firstnum,secondnum));
        }
        ListSub.add(Data.substring(j*32));

        for(h=0 ; h<ListSub.size();h++)
        {
            System.out.println(ListSub.get(h));
            ListEnc.add(JavaStringToHexString32B(ListSub.get(h)));

        }

        DynamicArray<Bytes32> listEnc = new DynamicArray<Bytes32>(ListEnc);


        try {
            Function IndexUpdateCreate = new Function(
                    "OrderAdd",
                    Arrays.<Type>asList(
                            new Uint256(new BigInteger(index)),
                            new Address(Addr),
                            listEnc





                    )
                    ,
                    Collections.<TypeReference<?>>emptyList()
            );


            try {
                txHash = callNonViewFunction(HabilitationAddress, IndexUpdateCreate);

                return txHash;
            } catch (Exception e) {
                e.printStackTrace();
            }
            return txHash;
        } catch (Exception e) {
            e.printStackTrace();
            return null;
        }

    }

    @SimpleFunction(description="Add status Issuer to the Order")
    public String habilitationOrderIssuerStatusEoaChange( String HabilitationAddress,String index,
                                                          String newStatus) {
        String txHash =  null;

        try {
            Function IndexUpdateCreate = new Function(
                    "OrderIssuerStatusChange",
                    Arrays.<Type>asList(new Uint256(new BigInteger(index)),
                            new Uint256(new BigInteger(newStatus)))





                    ,
                    Collections.<TypeReference<?>>emptyList()
            );


            try {
                txHash = callNonViewFunction(HabilitationAddress, IndexUpdateCreate);

                return txHash;
            } catch (Exception e) {
                e.printStackTrace();
            }
            return txHash;
        } catch (Exception e) {
            e.printStackTrace();
            return null;
        }

    }

    @SimpleFunction(description="Sign an Order")
    public String habilitationOrderEoaSign( String HabilitationAddress,String index,
                                            String amount , String Type , String M) {
        String txHash =  null;

        try {
            Function IndexUpdateCreate = new Function(
                    "OrderSign",
                    Arrays.<Type>asList(new Uint256(new BigInteger(index)),
                            new Uint256(new BigInteger(amount)),
                            new Utf8String(Type),
                            new Bytes32(Numeric.hexStringToByteArray(M)))






                    ,
                    Collections.<TypeReference<?>>emptyList()
            );


            try {
                txHash = callNonViewFunction(HabilitationAddress, IndexUpdateCreate);

                return txHash;
            } catch (Exception e) {
                e.printStackTrace();
            }
            return txHash;
        } catch (Exception e) {
            e.printStackTrace();
            return null;
        }

    }

    @SimpleFunction(description="Add Acquirer status to Order")
    public String habilitationOrderAcquirerEoaAdd( String HabilitationAddress,String index,
                                                   String newStatus) {
        String txHash =  null;

        try {
            Function IndexUpdateCreate = new Function(
                    "OrderAcquirerAdd",
                    Arrays.<Type>asList(new Uint256(new BigInteger(index)),
                            new Uint256(new BigInteger(newStatus)))







                    ,
                    Collections.<TypeReference<?>>emptyList()
            );


            try {
                txHash = callNonViewFunction(HabilitationAddress, IndexUpdateCreate);

                return txHash;
            } catch (Exception e) {
                e.printStackTrace();
            }
            return txHash;
        } catch (Exception e) {
            e.printStackTrace();
            return null;
        }

    }




    ///////////////////////////////////////////////////////////////////////////////////////////
    /*  Order USER functions                                                    */
//////////////////////////////////////////////////////////////////////////////////
    @SimpleFunction(description="USERSAFE : Create an Order")
     public String habilitationOrderUserCreate(String userSafeAddress,String HabilitationAddress,String headerMerkle,
                                              List<String> Habilitated,List<String> encrypted, String Parent, String ParentData) {
        String QaxhModule = getQaxhModule(userSafeAddress);
        String txHash =  null;
        int i ;
        int j ,h;
        int lastElement = 0;
        int SizeListHab = Habilitated.size() /*-1*/; // Size with App inventor -> SizeListAmount - 1 ( so if you test you must add - 1 here !!!)
        int SizeListEnc = encrypted.size() /*-1*/; // Size with App Inventor -> SizeListCategories - 1 ( so if you test you must add - 1 here!!! )
        //  Java with App inventor : First Element is in List[1] and last element is in List[List.size()]
        ArrayList<Address> ListAddr = new ArrayList<Address>();
        for(i = 1 ; i <= SizeListHab ;i++)
        {   //MyStr2+="\n"+Habilitated.get(i);
            ListAddr.add(new Address(Habilitated.get(i)));
            // System.out.println(amounts.get(i).toString());
        }

        ListAddr.add(new Address(Parent));
        ArrayList<Bytes32> ListEnc = new ArrayList<Bytes32>();
        ArrayList<Uint256> ListData = new ArrayList<>();
        ArrayList<String> ListSub= new ArrayList<>();

        String arr = "";
        int num;
        int firstnum,secondnum;

        for(i = 1 ; i <= SizeListEnc ;i++)
        {


            num = (int) Math.floor((encrypted.get(i).length() / 32));
            System.out.println(num);
            for(j=0;j< num  ;j++)
            {   firstnum = j*32;
                secondnum = (j+1)*32;
                ListSub.add(encrypted.get(i).substring(firstnum,secondnum));
            }
            ListSub.add(encrypted.get(i).substring(j*32));



            for(h=0 ; h<ListSub.size();h++)
            {
                System.out.println(ListSub.get(h));
                ListEnc.add(JavaStringToHexString32B(ListSub.get(h)));
                //
            }
            lastElement+=ListSub.size();
            ListData.add(new Uint256(lastElement));

            ListSub.clear();
        }


        ListSub.clear();
        num = (int) Math.floor((ParentData.length() / 32));
        System.out.println(num);
        for(j=0;j< num  ;j++)
        {   firstnum = j*32;
            secondnum = (j+1)*32;
            ListSub.add(ParentData.substring(firstnum,secondnum));
        }
        ListSub.add(ParentData.substring(j*32));

        for(h=0 ; h<ListSub.size();h++)
        {
            System.out.println(ListSub.get(h));
            ListEnc.add(JavaStringToHexString32B(ListSub.get(h)));

        }
        lastElement+=ListSub.size();
        ListData.add(new Uint256(lastElement));

        System.out.println("--------------------");
        for(i = 0 ; i < ListEnc.size(); i++)
        {
            System.out.println(Numeric.toHexString(ListEnc.get(i).getValue()));
        }

        System.out.println(ListAddr);
        for(i=0 ; i < ListData.size();i++)
            System.out.println(ListData.get(i).getValue().toString());




        DynamicArray<Bytes32> listEnc = new DynamicArray<Bytes32>(ListEnc);
        DynamicArray<Address> listAddr= new DynamicArray<Address>(ListAddr);
        DynamicArray<Uint256> listData = new DynamicArray<Uint256>(ListData);



        try {
            Function IndexUpdateCreate = new Function(
                    "OrderUserCreate",
                    Arrays.<Type>asList(
                            new Address(HabilitationAddress),
                            new Bytes32(Numeric.hexStringToByteArray(headerMerkle)),
                            listAddr,
                            listEnc,
                            listData




                    )
                    ,
                    Collections.<TypeReference<?>>emptyList()
            );


            try {
                txHash = callNonViewFunction(QaxhModule, IndexUpdateCreate);

                return txHash;
            } catch (Exception e) {
                e.printStackTrace();
            }
            return txHash;
        } catch (Exception e) {
            e.printStackTrace();
            return null;
        }

    }
     @SimpleFunction(description="USERSAFE: Add status Issuer to the Order")
   public String habilitationOrderUserAdd(String userSafeAddress, String HabilitationAddress,String index,
                                           String Addr, String Data) {
        String QaxhModule = getQaxhModule(userSafeAddress);
        String txHash =  null;
        int j ,num,firstnum,secondnum,h;
        ArrayList<Bytes32> ListEnc = new ArrayList<Bytes32>();
        ArrayList<String> ListSub= new ArrayList<>();
        num = (int) Math.floor((Data.length() / 32));
        System.out.println(num);
        for(j=0;j< num  ;j++)
        {   firstnum = j*32;
            secondnum = (j+1)*32;
            ListSub.add(Data.substring(firstnum,secondnum));
        }
        ListSub.add(Data.substring(j*32));

        for(h=0 ; h<ListSub.size();h++)
        {
            System.out.println(ListSub.get(h));
            ListEnc.add(JavaStringToHexString32B(ListSub.get(h)));

        }

        DynamicArray<Bytes32> listEnc = new DynamicArray<Bytes32>(ListEnc);



        try {
            Function IndexUpdateCreate = new Function(
                    "OrderUserAdd",
                    Arrays.<Type>asList(
                            new Address(HabilitationAddress),
                            new Uint256(new BigInteger(index)),
                            new Address(Addr),
                            listEnc



                    )
                    ,
                    Collections.<TypeReference<?>>emptyList()
            );


            try {
                txHash = callNonViewFunction(QaxhModule, IndexUpdateCreate);

                return txHash;
            } catch (Exception e) {
                e.printStackTrace();
            }
            return txHash;
        } catch (Exception e) {
            e.printStackTrace();
            return null;
        }

    }

      @SimpleFunction(description="USERSAFE: Add status Issuer to the Order")
    public String habilitationOrderIssuerStatusUserChange(String userSafeAddress, String HabilitationAddress,String index,
                                                          String newStatus) {
        String QaxhModule = getQaxhModule(userSafeAddress);
        String txHash =  null;

        try {
            Function IndexUpdateCreate = new Function(
                    "OrderUserIssuerStatusChange",
                    Arrays.<Type>asList(
                            new Address(HabilitationAddress),
                            new Uint256(new BigInteger(index)),
                            new Uint256(new BigInteger(newStatus)))





                    ,
                    Collections.<TypeReference<?>>emptyList()
            );


            try {
                txHash = callNonViewFunction(QaxhModule, IndexUpdateCreate);

                return txHash;
            } catch (Exception e) {
                e.printStackTrace();
            }
            return txHash;
        } catch (Exception e) {
            e.printStackTrace();
            return null;
        }

    }

    @SimpleFunction(description="USERSAFE: sign an Order")
    public String habilitationOrderUserSign(String userSafeAddress, String HabilitationAddress,String index,
                                            String amount , String Type , String M) {
        String QaxhModule = getQaxhModule(userSafeAddress);
        String txHash =  null;

        try {
            Function IndexUpdateCreate = new Function(
                    "OrderUserSign",
                    Arrays.<Type>asList(
                            new Address(HabilitationAddress),
                            new Uint256(new BigInteger(index)),
                            new Uint256(new BigInteger(amount)),
                            new Utf8String(Type),
                            new Bytes32(Numeric.hexStringToByteArray(M)))






                    ,
                    Collections.<TypeReference<?>>emptyList()
            );


            try {
                txHash = callNonViewFunction(QaxhModule, IndexUpdateCreate);

                return txHash;
            } catch (Exception e) {
                e.printStackTrace();
            }
            return txHash;
        } catch (Exception e) {
            e.printStackTrace();
            return null;
        }

    }

    @SimpleFunction(description="USERSAFE: Add Acquirer status to Order")
    public String habilitationOrderAcquirerUserAdd( String userSafeAddress,String HabilitationAddress,String index,
                                                   String newStatus) {
        String QaxhModule = getQaxhModule(userSafeAddress);
        String txHash =  null;

        try {
            Function IndexUpdateCreate = new Function(
                    "OrderUserAcquirerAdd",
                    Arrays.<Type>asList(
                            new Address(HabilitationAddress),
                            new Uint256(new BigInteger(index)),
                            new Uint256(new BigInteger(newStatus)))







                    ,
                    Collections.<TypeReference<?>>emptyList()
            );


            try {
                txHash = callNonViewFunction(QaxhModule, IndexUpdateCreate);

                return txHash;
            } catch (Exception e) {
                e.printStackTrace();
            }
            return txHash;
        } catch (Exception e) {
            e.printStackTrace();
            return null;
        }

    }

    //////////////////////////////////////////////////////////////////////////////////////////
      /*  blockchainEnciesEnc/Dec functions                                                             */
///////////////////////////////////////////////////////////////////////////////////////////
   @SimpleFunction(description="Generate a Key Pair for BlockchainEcies")
    public String blockchainEciesCreateKeys() {
        ECPublicKey publicKey;
        ECPrivateKey privateKey;
        BigInteger S = BigInteger.ZERO;
        ECPoint pubPoint;
        BigInteger pubX = BigInteger.ZERO;
        BigInteger pubY = BigInteger.ZERO;

        String privkey = "";
        String pubKey = "";

        try {
            ECGenParameterSpec ecParamSpec = new ECGenParameterSpec("secp256k1");
            KeyPairGenerator kpg = KeyPairGenerator.getInstance("ECDSA", "SC");
            kpg.initialize(ecParamSpec, new SecureRandom());
            KeyPair keyPair = kpg.generateKeyPair();
            publicKey = (ECPublicKey) keyPair.getPublic();
            privateKey = (ECPrivateKey) keyPair.getPrivate();

            pubKey = Base64.getEncoder().encodeToString(publicKey.getEncoded());

            privkey = Base64.getEncoder().encodeToString(privateKey.getEncoded());
            System.out.println(" Private : " + privkey);
            System.out.println(" Public : " + pubKey );
            System.out.println(" Private length:" + privkey.length()+ " Bytes");
            System.out.println(" Public length : " + pubKey.length()+ " Bytes");
            System.out.println(" HEX Private length ( without \"0x\") :" + bytesToHex(privkey.getBytes(StandardCharsets.UTF_8)).length()  );
            System.out.println(" HEX Public length  ( without \"0x\"):" + bytesToHex(pubKey.getBytes(StandardCharsets.UTF_8)).length() );

        } catch (Exception e) {
            e.printStackTrace();
            return null;
        }
     return "0x"+bytesToHex(privkey.getBytes(StandardCharsets.UTF_8)) +"/"+"0x"+bytesToHex(pubKey.getBytes(StandardCharsets.UTF_8));

    }




   @SimpleFunction(description="Encrypt Data from PublicKey")
    public String blockchainEciesEncryptData(String PublicKey, String plaintext){
        byte[] PublicKeyBytes;
        // PublicKey.getBytes(StandardCharsets.UTF_8);
        if(checkHex(PublicKey))
        {
            PublicKey = HexStringToAsciiString(PublicKey);
            PublicKeyBytes = PublicKey.getBytes(StandardCharsets.UTF_8);
            System.out.println("HEX\n");

        }
        else {
            PublicKeyBytes = PublicKey.getBytes(StandardCharsets.UTF_8);
        }
        byte[] keyBytes = Base64.getDecoder().decode(PublicKeyBytes);
        X509EncodedKeySpec spec = new X509EncodedKeySpec(keyBytes);

        try {
            KeyFactory keyFactory = KeyFactory.getInstance("ECDSA", "SC");
            ECPublicKey key = (ECPublicKey) keyFactory.generatePublic(spec);
            Cipher dCipher = Cipher.getInstance("ECIESwithAES");
            dCipher.init(Cipher.ENCRYPT_MODE, key);
            byte[] priTText = dCipher.doFinal(plaintext.getBytes(StandardCharsets.UTF_8));
            System.out.println(new String(priTText, "UTF8"));
            return "0x"+bytesToHex(priTText);

            //return new String(priTText,"UTF8");

        }
        catch(Exception e) {
            e.printStackTrace();
            return null;
        }
    }

  @SimpleFunction(description="Decrypt Data from PrivateKey")
  public String blockchainEciesDecryptMessage(String PrivateKey, String cipherText)
    {
        byte[] PrivateKeyBytes;

        // PublicKey.getBytes(StandardCharsets.UTF_8);
        if(checkHex(PrivateKey))
        {
            PrivateKey = HexStringToAsciiString(PrivateKey);
            PrivateKeyBytes = PrivateKey.getBytes(StandardCharsets.UTF_8);
            System.out.println("HEX\n");


        }
        else {
            PrivateKeyBytes = PrivateKey.getBytes(StandardCharsets.UTF_8);
        }
        byte[] keyBytes = Base64.getDecoder().decode(PrivateKeyBytes);
        PKCS8EncodedKeySpec spec = new PKCS8EncodedKeySpec(keyBytes);
        try {
            KeyFactory keyFactory = KeyFactory.getInstance("ECDSA", "SC");
            PrivateKey key = keyFactory.generatePrivate(spec);
            Cipher dCipher = Cipher.getInstance("ECIESwithAES");
            dCipher.init(Cipher.DECRYPT_MODE, key);
            byte[] priTText;
            if(checkHex(cipherText))
            {priTText = dCipher.doFinal(hexStringToByteArray(cipherText));}
            else
            {priTText = dCipher.doFinal(cipherText.getBytes(StandardCharsets.UTF_8));}
            //System.out.println(new String(priTText, "UTF8"));
            return new String(priTText,"UTF8");

        }
        catch(Exception e) {
            e.printStackTrace();
            return null;
        }


    }

  @SimpleFunction(description="Create Key AES from Password / salt")
  public String blockchainAesCreateKeyFromPassword(String password, String salt, String length){
      try{
          int len = Integer.parseInt(length);
          if(len == 256 || len == 192 || len == 128){
              SecretKeyFactory factory = SecretKeyFactory.getInstance("PBKDF2WithHmacSHA256");
              KeySpec spec = new PBEKeySpec(password.toCharArray(), salt.getBytes(), 65536, len);
              SecretKey secret = new SecretKeySpec(factory.generateSecret(spec)
                      .getEncoded(), "AES");

              System.out.println(bytesToHex(secret.getEncoded()));
              System.out.println(Base64.getEncoder().encodeToString(secret.getEncoded()));
              return "0x"+bytesToHex(Base64.getEncoder().encodeToString(secret.getEncoded()).getBytes());}
          else
          {
              throw new Exception("Length of key not suitable");
          }

               /* //rebuild key using SecretKeySpec
                   String keyEnc = Base64.getEncoder().encodeToString(secret.getEncoded());

                   byte[] decodedKey = Base64.getDecoder().decode(keyEnc);

                  SecretKey originalKey = new SecretKeySpec(decodedKey, 0, decodedKey.length, "AES");
                  System.out.println("0x"+bytesToHex(Base64.getEncoder().encodeToString(originalKey.getEncoded()).getBytes()));*/

      }
      catch(Exception e) {
          e.printStackTrace();


          return null;
      } }
   @SimpleFunction(description="Create Key AES from length 256/192/128")
   public String blockchainAesCreateKeyFromLength(String length){

       try{
           int len = Integer.parseInt(length);
           if(len == 256 || len == 192 || len == 128)
           {KeyGenerator keyGenerator = KeyGenerator.getInstance("AES");
               keyGenerator.init(Integer.parseInt(length));
               SecretKey key = keyGenerator.generateKey();
               byte[] iv = fromHexString("53 65 72 67 69 6f 47 69 61 72 64 69 6e 61 31 32");
               // new SecureRandom().nextBytes(iv);
               // 53657267696f4769617264696e613132

               System.out.println(bytesToHex(key.getEncoded())); /* key with right format ( 256 bit ) 32 characters */
               System.out.println(Base64.getEncoder().encodeToString(key.getEncoded())); /*key format base64*/
               return "0x"+bytesToHex(Base64.getEncoder().encodeToString(key.getEncoded()).getBytes());}
           else
           {
               throw new Exception("Length of key not suitable");
           }


       }
       catch(Exception e) {
           e.printStackTrace();


           return null;
       } }


    public static byte[] ReadBuffer64(int num , List<Byte> array){
        byte[] buffer = new byte[64];
        int i , j ;
        int num2 = (num + 1 )*64;
        for( j = 0 , i = num * 64 ; i < num2 ; i++ , j++)
        {
            buffer[j] = array.get(i);
        }

        return buffer;

    }

    public static byte[] fromHexString(String src) {
        byte[] biBytes = new BigInteger("10" + src.replaceAll("\\s", ""), 16).toByteArray();
        return Arrays.copyOfRange(biBytes, 1, biBytes.length);
    }
 @SimpleFunction(description="Encrypt file with AES")
    public String blockchainAesEncryptFile(String symetricKey, String inputFile, String outputFile) {
     try {

         byte[] iv = fromHexString("53 65 72 67 69 6f 47 69 61 72 64 69 6e 61 31 32");
         // random:  new SecureRandom().nextBytes(iv);


         byte[] decodedKey = Base64.getDecoder().decode(HexStringToAsciiString(symetricKey));
         // rebuild key using SecretKeySpec
         SecretKey originalKey = new SecretKeySpec(decodedKey, 0, decodedKey.length, "AES");


         try {
             FileInputStream inputStream = new FileInputStream(inputFile);

             try{
                 File tempFile = new File(outputFile);
                 boolean exists = tempFile.exists();
                 if(exists)
                 {
                     throw new Exception("File output already exists");
                 }
                 FileOutputStream outputStream = new FileOutputStream(outputFile);

                 try{
                     Cipher cipher = Cipher.getInstance("AES/CBC/PKCS7Padding");
                     cipher.init(Cipher.ENCRYPT_MODE, originalKey, new IvParameterSpec(iv));


                     // ByteArrayOutputStream bufferOut = new ByteArrayOutputStream();

                     byte[] buffer = new byte[64];
                     int bytesRead;
                     while ((bytesRead = inputStream.read(buffer)) != -1) {
                         byte[] output = cipher.update(buffer, 0, bytesRead);
                         if (output != null) {
                             outputStream.write(bytesToHex(output).getBytes(StandardCharsets.UTF_8));
                         }
                     }



                     //  byte cipherText[] = outputStream.toByteArray( );
                     byte[] outputBytes = cipher.doFinal();
                     if (outputBytes != null) {
                         outputStream.write(bytesToHex(outputBytes).getBytes(StandardCharsets.UTF_8));
                     }
                     // System.out.println(bytesToHex(originalKey.getEncoded()));
                     inputStream.close();
                     outputStream.close();



                     return "0";
                 }
                 catch(Exception e) {
                     e.printStackTrace();


                     return "-4";
                 }
             }
             catch(Exception e) {

                 e.printStackTrace();


                 return "-2";
             }
         }catch(Exception e) {
             e.printStackTrace();


             return "-1";
         }
     }
     catch(Exception e) {
         e.printStackTrace();


         return "-3";
     }
 }
 @SimpleFunction(description="Decrypt file with AES")
    public String blockchainAesDecryptFile(String symetricKey, String inputFile, String outputFile) {
        try {
            byte[] newData = new byte[16384];
            int nRead;
            byte[] iv = fromHexString("53 65 72 67 69 6f 47 69 61 72 64 69 6e 61 31 32");
            // random:  new SecureRandom().nextBytes(iv);


            byte[] decodedKey = Base64.getDecoder().decode(HexStringToAsciiString(symetricKey));
            // rebuild key using SecretKeySpec
            SecretKey originalKey = new SecretKeySpec(decodedKey, 0, decodedKey.length, "AES");



            try {
                FileInputStream inputStreamIN = new FileInputStream(inputFile);


                try{
                    File tempFile = new File(outputFile);
                    boolean exists = tempFile.exists();
                    if(exists)
                    {
                        throw new Exception("File output already exists");
                    }
                    FileOutputStream outputStreamPlain = new FileOutputStream(outputFile);

                    try{






                        Cipher cipher_dec = Cipher.getInstance("AES/CBC/PKCS7Padding");
                        cipher_dec.init(Cipher.DECRYPT_MODE, originalKey,new IvParameterSpec(iv));


                        ByteArrayOutputStream bufferIn = new ByteArrayOutputStream();


                        while ((nRead = inputStreamIN.read(newData, 0, newData.length)) != -1) {
                            bufferIn.write(newData, 0, nRead);
                        }

                        byte[] BytesArrayFileIn = bufferIn.toByteArray();
                        String hex = new String(BytesArrayFileIn);
                        System.out.println(hex);
                        byte[] ciphertext = hexStringToByteArray(hex);

                        byte[] outputBytesDEC = cipher_dec.update(ciphertext, 0,ciphertext.length );

                        if (outputBytesDEC != null) { outputStreamPlain.write(outputBytesDEC);}
                        byte[] outputDEC = cipher_dec.doFinal();
                        if (outputDEC != null) { outputStreamPlain.write(outputDEC); }
                        //  byte cipherText[] = outputStream.toByteArray( );


                        inputStreamIN.close();
                        outputStreamPlain.close();

                        return "0";
                    }
                    catch(Exception e) {
                        e.printStackTrace();


                        return "-4";
                    }
                }
                catch(Exception e) {

                    e.printStackTrace();


                    return "-2";
                }
            }catch(Exception e) {
                e.printStackTrace();


                return "-1";
            }
        }
        catch(Exception e) {
            e.printStackTrace();


            return "-3";
        }
    }

@SimpleFunction(description="Encrypt message with AES")
    public String blockchainAesEncryptMessage(String symetricKey, String message) {

    try {
        int i ,j;
        byte[] iv = fromHexString("53 65 72 67 69 6f 47 69 61 72 64 69 6e 61 31 32");
        //random:  new SecureRandom().nextBytes(iv);



        byte[] decodedKey = Base64.getDecoder().decode(HexStringToAsciiString(symetricKey));
        System.out.println(HexStringToAsciiString(symetricKey));
        // rebuild key using SecretKeySpec

        SecretKey originalKey = new SecretKeySpec(decodedKey, "AES");


        try {
             String mex = bytesToHex(message.getBytes(StandardCharsets.UTF_8));
             if (!checkHex(mex))
                throw new Exception("Not hex message");


            try {
                Cipher cipher = Cipher.getInstance("AES/CBC/PKCS7Padding");
                cipher.init(Cipher.ENCRYPT_MODE, originalKey, new IvParameterSpec(iv));

                byte BytesArrayFile[] = mex.getBytes(StandardCharsets.UTF_8);


                // Encrypt every block 64 bytes
                ByteArrayOutputStream outputStream = new ByteArrayOutputStream( );

                byte[] outputBytes = cipher.update(BytesArrayFile, 0,BytesArrayFile.length );

                if (outputBytes != null) { outputStream.write(outputBytes);}
                byte[] output = cipher.doFinal();
                if (output != null) { outputStream.write(output); }
                byte cipherText[] = outputStream.toByteArray( );
                System.out.println(bytesToHex(originalKey.getEncoded()));
                String res = bytesToHex(cipherText);
                System.out.println(res);

                return "0x"+bytesToHex(cipherText);





            } catch (Exception e) {
                e.printStackTrace();


                return "-3";
            }

        } catch (Exception e) {
            e.printStackTrace();


            return "-1";
        }
    } catch (Exception e) {
        e.printStackTrace();


        return "-4";
    }
}
@SimpleFunction(description="Decrypt message with AES")
    public String blockchainAesDecryptMessage(String symetricKey, String message) {

    try {
        byte[] iv = fromHexString("53 65 72 67 69 6f 47 69 61 72 64 69 6e 61 31 32");
        //random:  new SecureRandom().nextBytes(iv);



        byte[] decodedKey = Base64.getDecoder().decode(HexStringToAsciiString(symetricKey));
        System.out.println(HexStringToAsciiString(symetricKey));
        // rebuild key using SecretKeySpec
        // System.out.println(decodedKey.length);
        SecretKey originalKey = new SecretKeySpec(decodedKey, "AES");


        try {
            if (!checkHex(message))
                throw new Exception("Not hex message");


            try {


                byte[] cipherT = hexStringToByteArray(message.substring(2));
                Cipher cipher_dec = Cipher.getInstance("AES/CBC/PKCS7Padding");
                cipher_dec.init(Cipher.DECRYPT_MODE, originalKey,new IvParameterSpec(iv));
                ByteArrayOutputStream outputStreamDEC = new ByteArrayOutputStream( );
                byte[] outputBytesDEC = cipher_dec.update(cipherT, 0,cipherT.length );
                if (outputBytesDEC != null) { outputStreamDEC.write(outputBytesDEC);}
                byte[] outputDEC = cipher_dec.doFinal();
                if (outputDEC != null) { outputStreamDEC.write(outputDEC); }
                byte[] plainText = outputStreamDEC.toByteArray( );
                System.out.println("Decrypt string: " + new String(plainText));

                return HexStringToAsciiString("0x"+new String(plainText));

            } catch (Exception e) {
                e.printStackTrace();


                return "-3";
            }

        } catch (Exception e) {
            e.printStackTrace();


            return "-1";
        }
    } catch (Exception e) {
        e.printStackTrace();


        return "-4";
    }
}












///////////////////////////////////////////////////////////////////////////////////////////
      /*  iotSafe EOA functions                                                             */
///////////////////////////////////////////////////////////////////////////////////////////

          @SimpleFunction(description=" Create new index in the iotSafe")
          public String iotSafeIndexEoaCreate(String iotSafeAddress) {
              Function indexCreate = new Function(
                  "indexCreate",
                  Collections.<Type>emptyList(),
                  Collections.<TypeReference<?>>emptyList()
              );
              return callNonViewFunction(iotSafeAddress, indexCreate);
          }
          @SimpleFunction(description="Update the iotSafe index with data")
          public String iotSafeIndexEoaUpdate(String iotSafeAddress, String index, String data) {
              Function indexUpdate = new Function(
                  "indexUpdate",
                  Arrays.<Type>asList(
                      new Uint256(new BigInteger(index)),
                      new Utf8String(data)),
                  Collections.<TypeReference<?>>emptyList()
              );
              return callNonViewFunction(iotSafeAddress, indexUpdate);
          }
          @SimpleFunction(description="orderEoaCreate of iotSafe")
         public String iotSafeOrderEoaCreate(String iotSafeAddress, String data, String dataIotKey) {
             Function orderEoaCreate = new Function(
                 "orderEoaCreate",
                 Arrays.<Type>asList(
                     new Utf8String(data),
                     new Address(dataIotKey)),
                 Collections.<TypeReference<?>>emptyList()
             );
             return callNonViewFunction(iotSafeAddress, orderEoaCreate);
         }

         @SimpleFunction(description="recordEoaCreate of iotSafe")
        public String iotSafeRecordEoaCreate(String iotSafeAddress, String data) {
            Function recordEoaCreate = new Function(
                "recordEoaCreate",
                Arrays.<Type>asList(
                    new Utf8String(data)),
                Collections.<TypeReference<?>>emptyList()
            );
            return callNonViewFunction(iotSafeAddress, recordEoaCreate);
        }
        @SimpleFunction(description="EOA: activation iotSafe")
       public String iotSafeActivationEoaSign(String iotSafeAddress, String status){
           String txHash =  null;


           Function eoaSign = new Function(
                   "activationEoaSign",
                   Arrays.<Type>asList(
                           new Uint256(new BigInteger(status))
                   ),
                   Collections.<TypeReference<?>>emptyList()
           );
           try {
               txHash = callNonViewFunction(iotSafeAddress, eoaSign);

               return txHash;
           }
           catch (Exception e) {
               e.printStackTrace();
           }
           return txHash;
       }
       @SimpleFunction(description="eoaRefuel")
       public String iotSafeEoaRefuel(String iotSafeAddress, String iotKey) {
           Function eoaRefuel = new Function(
               "eoaRefuel",
               Arrays.<Type>asList(
                   new Address(iotKey)),
               Collections.<TypeReference<?>>emptyList()
           );
           return callNonViewFunction(iotSafeAddress, eoaRefuel);
       }

///////////////////////////////////////////////////////////////////////////////////////////
          /*  IoTSafe user functions                                                             */
///////////////////////////////////////////////////////////////////////////////////////////
    @SimpleFunction(description="USERSAFE: create data of Index List")
    public String iotSafeIndexUserCreate (String userSafeAddress, String iotSafeAddress) {
        String QaxhModule = getQaxhModule(userSafeAddress);
        String txHash =  null;

        try {
            Function IndexUserCreate = new Function(
                    "indexUserCreate",
                    Arrays.<Type>asList(
                            new Address(iotSafeAddress)

                    )
                    ,
                    Collections.<TypeReference<?>>emptyList()
            );


            try {
                txHash = callNonViewFunction(QaxhModule, IndexUserCreate);

                return txHash;
            } catch (Exception e) {
                e.printStackTrace();
            }
            return txHash;
        } catch (Exception e) {
            e.printStackTrace();
            return null;
        }

    }


       @SimpleFunction(description="USERSAFE: update data of Index List")
    public String iotSafeIndexUserUpdate (String userSafeAddress, String iotSafeAddress,String index, String data) {
        String QaxhModule = getQaxhModule(userSafeAddress);
        String txHash =  null;

        try {
            Function IndexUpdateCreate = new Function(
                    "indexUserUpdate",
                    Arrays.<Type>asList(
                            new Address(iotSafeAddress),
                            new Uint256(new BigInteger(index)),
                            new Utf8String(data)



                    )
                    ,
                    Collections.<TypeReference<?>>emptyList()
            );


            try {
                txHash = callNonViewFunction(QaxhModule, IndexUpdateCreate);

                return txHash;
            } catch (Exception e) {
                e.printStackTrace();
            }
            return txHash;
        } catch (Exception e) {
            e.printStackTrace();
            return null;
        }

    }
    @SimpleFunction(description="orderUserCreate of iotSate")
   public String iotSafeOrderUserCreate(String userSafe, String iotSafeAddress, String data, String dataIotKey) {
       Function orderCreate = new Function(
           "orderUserCreate",
           Arrays.<Type>asList(
               new Address(iotSafeAddress),
               new Utf8String(data),
               new Address(dataIotKey)),
           Collections.<TypeReference<?>>emptyList()
       );
       return callNonViewFunction(userSafe, orderCreate);
   }

   @SimpleFunction(description="recordUserCreate of iotSate")
   public String iotSafeRecordUserCreate(String userSafe, String iotSafeAddress, String data) {
      Function recordCreate = new Function(
          "recordUserCreate",
          Arrays.<Type>asList(
              new Address(iotSafeAddress),
              new Utf8String(data)),
          Collections.<TypeReference<?>>emptyList()
      );
      return callNonViewFunction(userSafe, recordCreate);
   }
   @SimpleFunction(description="userRefuel")
   public String iotSafeUserRefuel(String userSafe, String iotSafeAddress, String iotKey) {
       Function userRefuel = new Function(
           "userRefuel",
           Arrays.<Type>asList(
               new Address(iotSafeAddress),
               new Address(iotKey)),
           Collections.<TypeReference<?>>emptyList()
       );
       return callNonViewFunction(userSafe, userRefuel);
   }

   @SimpleFunction(description="USERSAFE: activation IotSafe")
   public String iotSafeActivationUserSign(String userSafe, String iotSafeAddress, String status){
       String txHash =  null;
       String QaxhModule = getQaxhModule(userSafe);

       Function UserSign = new Function(
               "activationUserSign",
               Arrays.<Type>asList(
                       new Address(iotSafeAddress),
                       new Uint256(new BigInteger(status))
               ),
               Collections.<TypeReference<?>>emptyList()
       );
       try {
           txHash = callNonViewFunction(QaxhModule, UserSign);

           return txHash;
       }
       catch (Exception e) {
           e.printStackTrace();
       }
       return txHash;
   }


///////////////////////////////////////////////////////////////////////////////////////////
    /*  IotSafe Getter functions                                                    */
///////////////////////////////////////////////////////////////////////////////////////////


             @SimpleFunction(description="Get last index in the iotSafe.")
              public String iotSafeIndexGetLast(String iotSafeAddress){
                  String lastIndex = null;

                  try {
                      Function getLastIndex = new Function(
                              "indexGetLast",
                              Collections.<Type>emptyList(),
                              Collections.<TypeReference<?>>singletonList(new TypeReference<Uint256>(){})
                      );
                      List<Uint256> nbIndexes  = callViewFunction(iotSafeAddress, getLastIndex);

                      lastIndex = nbIndexes.get(0).getValue().toString();

                      return lastIndex;
                  }
                  catch(Exception e){
                      e.printStackTrace();
                  }
                  return null;
              }

          @SimpleFunction(description="Get data at index in the iotSafe")
          public String iotSafeIndexGetData(String iotSafeAddress, String index) {
        Function indexGetData = new Function(
            "indexGetData",
            Arrays.<Type>asList(new Uint256(new BigInteger(index))),
            Collections.<TypeReference<?>>singletonList(new TypeReference<Utf8String>(){})
            );
        List<Utf8String> st = callViewFunction(iotSafeAddress, indexGetData);
        if(st == null)
          { return "Error Index" ;}
            return st.get(0).toString();
        }



                              @SimpleFunction(description="getVariables of iotSafe")
                              public List<String> iotSafeGetVariables(String iotSafeAddress) {
                                  List<String> result = new ArrayList<String>();
                                  Function getVariables = new Function(
                                      "getVariables",
                                      Collections.<Type>emptyList(),
                                      Arrays.<TypeReference<?>>asList(
                                          new TypeReference<Address>(){},
                                          new TypeReference<Uint256>(){},
                                          new TypeReference<Utf8String>(){},
                                          new TypeReference<Uint256>(){},
                                          new TypeReference<Uint8>(){}
                                          )
                                  );
                                  List<Type> st = callViewFunction(iotSafeAddress, getVariables);
                                  result.add(st.get(0).getValue().toString());
                                  result.add(st.get(1).getValue().toString());
                                  result.add(st.get(2).getValue().toString());
                                  result.add(st.get(3).getValue().toString());
                                  result.add(st.get(4).getValue().toString());
                                  return(result);
                              }



  ///////////////////////////////////////////////////////////////////////////////////////////
            /*  IotSafe records functions                                                    */
  ///////////////////////////////////////////////////////////////////////////////////////////
    @SimpleFunction(description=" Return the last indice of records")
    public String iotSafeRecordGetLast(String iotSafeAddress) {
        Function iotSafeRecordGetLast = new Function(
            "recordGetLast",
            Collections.<Type>emptyList(),
      Collections.<TypeReference<?>>singletonList(new TypeReference<Uint256>(){})
        );
        List<Uint256> st = callViewFunction(iotSafeAddress, iotSafeRecordGetLast);
        return(st.get(0).getValue().toString());
    }
    @SimpleFunction(description="recordGetData")
     public List<String> iotSafeRecordGetData(String iotSafeAddress, String index) {
         List<String> result = new ArrayList<String>();
         Function recordGetData = new Function(
             "recordGetData",
             Arrays.<Type>asList(
                 new Uint256(new BigInteger(index))),
             Arrays.<TypeReference<?>>asList(
                 new TypeReference<Utf8String>(){},
                 new TypeReference<Uint256>(){},
                 new TypeReference<Address>(){})
         );
         List<Type> st = callViewFunction(iotSafeAddress, recordGetData);
         result.add(st.get(0).getValue().toString());
         result.add(st.get(1).getValue().toString());
         result.add(st.get(2).getValue().toString());
         return(result);
     }

///////////////////////////////////////////////////////////////////////////////////////////
                /*  IotSafe orders functions                                                    */
///////////////////////////////////////////////////////////////////////////////////////////
@SimpleFunction(description=" Return the last indice of orders")
public String iotSafeOrderGetLast(String iotSafeAddress) {
    Function iotSafeOrderGetLast = new Function(
        "orderGetLast",
        Collections.<Type>emptyList(),
  Collections.<TypeReference<?>>singletonList(new TypeReference<Uint256>(){})
    );
    List<Uint256> st = callViewFunction(iotSafeAddress, iotSafeOrderGetLast);
    return(st.get(0).getValue().toString());
}
@SimpleFunction(description="orderGetData")
 public List<String> iotSafeOrderGetData(String iotSafeAddress, String index) {
     List<String> result = new ArrayList<String>();
     Function orderGetData = new Function(
         "orderGetData",
         Arrays.<Type>asList(
             new Uint256(new BigInteger(index))),
         Arrays.<TypeReference<?>>asList(
             new TypeReference<Utf8String>(){},
             new TypeReference<Uint256>(){},
             new TypeReference<Address>(){})
     );
     List<Type> st = callViewFunction(iotSafeAddress, orderGetData);
     result.add(st.get(0).getValue().toString());
     result.add(st.get(1).getValue().toString());
     result.add(st.get(2).getValue().toString());
     return(result);
 }


 ///////////////////////////////////////////////////////////////////////////////////////////
                 /*  IotSafe iotKey functions                                                    */
 ///////////////////////////////////////////////////////////////////////////////////////////
 @SimpleFunction(description="keyEoaInactivate")
 public String iotSafeKeyEoaInactivate(String iotSafeAddress, String iotKey) {
     Function keyEoaInactivate = new Function(
         "keyEoaInactivate",
         Arrays.<Type>asList(
             new Address(iotKey)),
         Collections.<TypeReference<?>>emptyList()
     );
     return callNonViewFunction(iotSafeAddress, keyEoaInactivate);
 }

 @SimpleFunction(description="keyEoaAdd")
 public String iotSafeKeyEoaAdd(String iotSafeAddress, String iotKey, String floorLimitGwei, String refuelAmountGwei) {
     Function keyEoaAdd = new Function(
         "keyEoaAdd",
         Arrays.<Type>asList(
             new Address(iotKey),
             new Uint256(new BigInteger(floorLimitGwei)),
             new Uint256(new BigInteger(refuelAmountGwei))),
         Collections.<TypeReference<?>>emptyList()
     );
     return callNonViewFunction(iotSafeAddress, keyEoaAdd);
 }

 @SimpleFunction(description="keyUserAdd")
 public String iotSafeKeyUserAdd(String userSafe, String iotSafeAddress, String iotKey, String floorLimitGwei, String refuelAmountGwei) {
     Function keyUserAdd = new Function(
         "keyUserAdd",
         Arrays.<Type>asList(
             new Address(iotSafeAddress),
             new Address(iotKey),
             new Uint256(new BigInteger(floorLimitGwei)),
             new Uint256(new BigInteger(refuelAmountGwei))),
         Collections.<TypeReference<?>>emptyList()
     );
     return callNonViewFunction(userSafe, keyUserAdd);
 }

@SimpleFunction(description="keyUserInactivate of iotSate")
public String iotSafeKeyUserInactivate(String userSafe , String iotSafeAddress, String iotKey) {
    Function keyUserInactivate = new Function(
        "keyUserInactivate",
        Arrays.<Type>asList(
            new Address(iotSafeAddress),
            new Address(iotKey)),
        Collections.<TypeReference<?>>emptyList()
    );
    return callNonViewFunction(userSafe, keyUserInactivate);
}
@SimpleFunction(description="keysGetData")
    public List<String> iotSafeKeysGetData(String iotSafeAddress, String iotKey) {
        List<String> result = new ArrayList<String>();
        Function keysGetData = new Function(
            "keysGetData",
            Arrays.<Type>asList(
                new Address(iotKey)),
            Arrays.<TypeReference<?>>asList(
                new TypeReference<Uint256>(){},
                new TypeReference<Uint256>(){},
                new TypeReference<Uint256>(){})
        );
        List<Type> st = callViewFunction(iotSafeAddress, keysGetData);
        result.add(st.get(0).getValue().toString());
        result.add(st.get(1).getValue().toString());
        result.add(st.get(2).getValue().toString());
        return(result);
    }

        @SimpleFunction(description="Get list Keys")
         public List<String> iotSafeKeysGetList(String iotSafeAddress){
             List<String> result = new ArrayList<String>();


             try {
                 Function keysGetList = new Function(
                         "keysGetList",
                         Collections.<Type>emptyList(),
                         Collections.<TypeReference<?>>singletonList(new TypeReference<DynamicArray<Address>>(){})
                 );
                 List<DynamicArray<Address>> st  = callViewFunction(iotSafeAddress,keysGetList);

                 for (Address tmp : st.get(0).getValue()){
                     result.add(tmp.getValue().toString());
                 }



                 return result;
             }
             catch(Exception e){
                 e.printStackTrace();
             }
             return null;
         }

///////////////////////////////////////////////////////////////////////////////////////////
                          /*  IotDirectory functions                                      */
///////////////////////////////////////////////////////////////////////////////////////////

@SimpleFunction(description="getIotSafeList")
 public List<String> iotDirectoryGetIotsafeList(String iotDirectoryAddress, String iotParent ){
     List<String> result = new ArrayList<String>();

     try {
       Function getIotSafeList = new Function(
           "getIotSafeList",
             Arrays.<Type>asList(
               new Address(iotParent)),
                 Collections.<TypeReference<?>>singletonList(new TypeReference<DynamicArray<Address>>(){})
         );
         List<DynamicArray<Address>> st  = callViewFunction(iotDirectoryAddress,getIotSafeList);

         for (Address tmp : st.get(0).getValue()){
             result.add(tmp.getValue().toString());
         }

         return result;
     }
     catch(Exception e){
         e.printStackTrace();
     }
     return null;
 }
 @SimpleFunction(description="KeyHatchRegister")
 public String iotDirectoryKeyHatchRegister(String iotDirectoryAddress, String iotParent, String iotSafeAddressJ1, String iotKeyV1) {
     Function KeyHatchRegister = new Function(
         "KeyHatchRegister",
         Arrays.<Type>asList(
             new Address(iotParent),
             new Address(iotSafeAddressJ1),
             new Address(iotKeyV1)),
         Collections.<TypeReference<?>>emptyList()
     );
     return callNonViewFunction(iotDirectoryAddress, KeyHatchRegister);
 }
 @SimpleFunction(description="getIotKeyList")
  public List<String> iotDirectoryGetIotKeyList(String iotDirectoryAddress, String iotSafeAddressJ1) {
      List<String> result = new ArrayList<String>();
      Function getIotKeyList = new Function(
          "getIotKeyList",
          Arrays.<Type>asList(
              new Address(iotSafeAddressJ1)),
          Arrays.<TypeReference<?>>asList(
              new TypeReference<Address>(){},
              new TypeReference<DynamicArray<Address>>(){})
      );
      List<Type> st = callViewFunction(iotDirectoryAddress, getIotKeyList);
      result.add(st.get(0).getValue().toString());
      result.add(st.get(1).getValue().toString());
      return(result);
  }
  @SimpleFunction(description="getVariables")
  public List<String> iotDirectoryGetVariables(String iotDirectoryAddress) {
      List<String> result = new ArrayList<String>();
      Function getVariables = new Function(
          "getVariables",
          Collections.<Type>emptyList(),
          Arrays.<TypeReference<?>>asList(
              new TypeReference<Address>(){},
              new TypeReference<Uint256>(){},
              new TypeReference<Utf8String>(){},
              new TypeReference<Uint256>(){})
      );
      List<Type> st = callViewFunction(iotDirectoryAddress, getVariables);
      result.add(st.get(0).getValue().toString());
      result.add(st.get(1).getValue().toString());
      result.add(st.get(2).getValue().toString());
      result.add(st.get(3).getValue().toString());
      return(result);
  }
  @SimpleFunction(description="getIotSafe of iotDirectory")
   public List<String> iotDirectoryGetIotSafe(String iotDirectoryAddress, String iotKeyV1) {
       List<String> result = new ArrayList<String>();
       Function getIotSafe = new Function(
           "getIotSafe",
           Collections.<Type>singletonList(
               new Address(iotKeyV1)),
           Arrays.<TypeReference<?>>asList(
               new TypeReference<Address>(){},
               new TypeReference<Address>(){})
       );
       List<Type> st = callViewFunction(iotDirectoryAddress, getIotSafe);
       result.add(st.get(0).getValue().toString());
       result.add(st.get(1).getValue().toString());
       return(result);
   }


}
